// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/cicdapi/api.proto

package cicdapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_CreateCICDProfile_FullMethodName  = "/com.spirl.api.v1.cicd.API/CreateCICDProfile"
	API_ListCICDProfiles_FullMethodName   = "/com.spirl.api.v1.cicd.API/ListCICDProfiles"
	API_GetCICDProfileInfo_FullMethodName = "/com.spirl.api.v1.cicd.API/GetCICDProfileInfo"
	API_DeleteCICDProfile_FullMethodName  = "/com.spirl.api.v1.cicd.API/DeleteCICDProfile"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Creates a new CI/CD Profile
	CreateCICDProfile(ctx context.Context, in *CreateCICDProfileRequest, opts ...grpc.CallOption) (*CreateCICDProfileResponse, error)
	// Lists CI/CD Profiles
	ListCICDProfiles(ctx context.Context, in *ListCICDProfilesRequest, opts ...grpc.CallOption) (*ListCICDProfilesResponse, error)
	// Returns the claims, jwks and issuer for all profiles
	GetCICDProfileInfo(ctx context.Context, in *GetCICDProfileInfoRequest, opts ...grpc.CallOption) (*GetCICDProfileInfoResponse, error)
	// Deletes the CI/CD profile with the given name
	DeleteCICDProfile(ctx context.Context, in *DeleteCICDProfileRequest, opts ...grpc.CallOption) (*DeleteCICDProfileResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateCICDProfile(ctx context.Context, in *CreateCICDProfileRequest, opts ...grpc.CallOption) (*CreateCICDProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCICDProfileResponse)
	err := c.cc.Invoke(ctx, API_CreateCICDProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListCICDProfiles(ctx context.Context, in *ListCICDProfilesRequest, opts ...grpc.CallOption) (*ListCICDProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCICDProfilesResponse)
	err := c.cc.Invoke(ctx, API_ListCICDProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCICDProfileInfo(ctx context.Context, in *GetCICDProfileInfoRequest, opts ...grpc.CallOption) (*GetCICDProfileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCICDProfileInfoResponse)
	err := c.cc.Invoke(ctx, API_GetCICDProfileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCICDProfile(ctx context.Context, in *DeleteCICDProfileRequest, opts ...grpc.CallOption) (*DeleteCICDProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCICDProfileResponse)
	err := c.cc.Invoke(ctx, API_DeleteCICDProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	// Creates a new CI/CD Profile
	CreateCICDProfile(context.Context, *CreateCICDProfileRequest) (*CreateCICDProfileResponse, error)
	// Lists CI/CD Profiles
	ListCICDProfiles(context.Context, *ListCICDProfilesRequest) (*ListCICDProfilesResponse, error)
	// Returns the claims, jwks and issuer for all profiles
	GetCICDProfileInfo(context.Context, *GetCICDProfileInfoRequest) (*GetCICDProfileInfoResponse, error)
	// Deletes the CI/CD profile with the given name
	DeleteCICDProfile(context.Context, *DeleteCICDProfileRequest) (*DeleteCICDProfileResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) CreateCICDProfile(context.Context, *CreateCICDProfileRequest) (*CreateCICDProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCICDProfile not implemented")
}
func (UnimplementedAPIServer) ListCICDProfiles(context.Context, *ListCICDProfilesRequest) (*ListCICDProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCICDProfiles not implemented")
}
func (UnimplementedAPIServer) GetCICDProfileInfo(context.Context, *GetCICDProfileInfoRequest) (*GetCICDProfileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCICDProfileInfo not implemented")
}
func (UnimplementedAPIServer) DeleteCICDProfile(context.Context, *DeleteCICDProfileRequest) (*DeleteCICDProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCICDProfile not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_CreateCICDProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCICDProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCICDProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateCICDProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCICDProfile(ctx, req.(*CreateCICDProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListCICDProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCICDProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListCICDProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListCICDProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListCICDProfiles(ctx, req.(*ListCICDProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCICDProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCICDProfileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCICDProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetCICDProfileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCICDProfileInfo(ctx, req.(*GetCICDProfileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteCICDProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCICDProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteCICDProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteCICDProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteCICDProfile(ctx, req.(*DeleteCICDProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.spirl.api.v1.cicd.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCICDProfile",
			Handler:    _API_CreateCICDProfile_Handler,
		},
		{
			MethodName: "ListCICDProfiles",
			Handler:    _API_ListCICDProfiles_Handler,
		},
		{
			MethodName: "GetCICDProfileInfo",
			Handler:    _API_GetCICDProfileInfo_Handler,
		},
		{
			MethodName: "DeleteCICDProfile",
			Handler:    _API_DeleteCICDProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cicdapi/api.proto",
}
