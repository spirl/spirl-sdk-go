// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/v1/devidentityapi/api.proto

package devidentityapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonOperator int32

const (
	// Equal operator.
	ComparisonOperator_EQUAL ComparisonOperator = 0
	// Not equal operator.
	ComparisonOperator_NOT_EQUAL ComparisonOperator = 1
)

// Enum value maps for ComparisonOperator.
var (
	ComparisonOperator_name = map[int32]string{
		0: "EQUAL",
		1: "NOT_EQUAL",
	}
	ComparisonOperator_value = map[string]int32{
		"EQUAL":     0,
		"NOT_EQUAL": 1,
	}
)

func (x ComparisonOperator) Enum() *ComparisonOperator {
	p := new(ComparisonOperator)
	*p = x
	return p
}

func (x ComparisonOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_devidentityapi_api_proto_enumTypes[0].Descriptor()
}

func (ComparisonOperator) Type() protoreflect.EnumType {
	return &file_api_v1_devidentityapi_api_proto_enumTypes[0]
}

func (x ComparisonOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator.Descriptor instead.
func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{0}
}

// OIDC client authentication method. OIDC Spec:
// https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
type ClientAuthMethod int32

const (
	// No client authentication method (default). Client will use client ID and
	// PKCE.
	ClientAuthMethod_CLIENTAUTHMETHOD_NONE ClientAuthMethod = 0
	// Deprecated. Client authentication using client secret in basic auth header.
	ClientAuthMethod_CLIENTAUTHMETHOD_SECRET_BASIC ClientAuthMethod = 1
	// Deprecated. Client authentication using client secret in POST body.
	ClientAuthMethod_CLIENTAUTHMETHOD_SECRET_POST ClientAuthMethod = 2
	// Client authentication using JWT assertion with client secret.
	ClientAuthMethod_CLIENTAUTHMETHOD_SECRET_JWT ClientAuthMethod = 3
	// Client authentication using JWT assertion with client private key.
	ClientAuthMethod_CLIENTAUTHMETHOD_PRIVATEKEY_JWT ClientAuthMethod = 4
	// Client authentication using client secret in basic auth header or POST
	// body.
	ClientAuthMethod_CLIENTAUTHMETHOD_SECRET_AUTODETECT ClientAuthMethod = 5
)

// Enum value maps for ClientAuthMethod.
var (
	ClientAuthMethod_name = map[int32]string{
		0: "CLIENTAUTHMETHOD_NONE",
		1: "CLIENTAUTHMETHOD_SECRET_BASIC",
		2: "CLIENTAUTHMETHOD_SECRET_POST",
		3: "CLIENTAUTHMETHOD_SECRET_JWT",
		4: "CLIENTAUTHMETHOD_PRIVATEKEY_JWT",
		5: "CLIENTAUTHMETHOD_SECRET_AUTODETECT",
	}
	ClientAuthMethod_value = map[string]int32{
		"CLIENTAUTHMETHOD_NONE":              0,
		"CLIENTAUTHMETHOD_SECRET_BASIC":      1,
		"CLIENTAUTHMETHOD_SECRET_POST":       2,
		"CLIENTAUTHMETHOD_SECRET_JWT":        3,
		"CLIENTAUTHMETHOD_PRIVATEKEY_JWT":    4,
		"CLIENTAUTHMETHOD_SECRET_AUTODETECT": 5,
	}
)

func (x ClientAuthMethod) Enum() *ClientAuthMethod {
	p := new(ClientAuthMethod)
	*p = x
	return p
}

func (x ClientAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_devidentityapi_api_proto_enumTypes[1].Descriptor()
}

func (ClientAuthMethod) Type() protoreflect.EnumType {
	return &file_api_v1_devidentityapi_api_proto_enumTypes[1]
}

func (x ClientAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientAuthMethod.Descriptor instead.
func (ClientAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{1}
}

type DevIDPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the DevIdentity policy.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the DevIdentity policy.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DevOIDCConfig ID of the DevIdentity policy.
	DevOidcConfigId string `protobuf:"bytes,3,opt,name=dev_oidc_config_id,json=devOidcConfigId,proto3" json:"dev_oidc_config_id,omitempty"`
	// DevOIDCConfig name of the DevIdentity policy.
	DevOidcConfigName string `protobuf:"bytes,4,opt,name=dev_oidc_config_name,json=devOidcConfigName,proto3" json:"dev_oidc_config_name,omitempty"`
	// Claims required during identity attestation.
	ClaimsFilter *ClaimsFilter `protobuf:"bytes,5,opt,name=claims_filter,json=claimsFilter,proto3" json:"claims_filter,omitempty"`
	// Path template used to generate SPIFFE ID.
	PathTemplate string `protobuf:"bytes,6,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// SVID TTL of the DevIdentity policy.
	SvidTtl *durationpb.Duration `protobuf:"bytes,7,opt,name=svid_ttl,json=svidTtl,proto3" json:"svid_ttl,omitempty"`
}

func (x *DevIDPolicy) Reset() {
	*x = DevIDPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevIDPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevIDPolicy) ProtoMessage() {}

func (x *DevIDPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevIDPolicy.ProtoReflect.Descriptor instead.
func (*DevIDPolicy) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{0}
}

func (x *DevIDPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DevIDPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DevIDPolicy) GetDevOidcConfigId() string {
	if x != nil {
		return x.DevOidcConfigId
	}
	return ""
}

func (x *DevIDPolicy) GetDevOidcConfigName() string {
	if x != nil {
		return x.DevOidcConfigName
	}
	return ""
}

func (x *DevIDPolicy) GetClaimsFilter() *ClaimsFilter {
	if x != nil {
		return x.ClaimsFilter
	}
	return nil
}

func (x *DevIDPolicy) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *DevIDPolicy) GetSvidTtl() *durationpb.Duration {
	if x != nil {
		return x.SvidTtl
	}
	return nil
}

type AddDevIdentityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the DevIdentity policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. DevOIDCConfig ID used for identity attestation.
	DevOidcConfigId string `protobuf:"bytes,2,opt,name=dev_oidc_config_id,json=devOidcConfigId,proto3" json:"dev_oidc_config_id,omitempty"`
	// Optional. Claims filters applied during identity attestation.
	ClaimsFilter *ClaimsFilter `protobuf:"bytes,3,opt,name=claims_filter,json=claimsFilter,proto3" json:"claims_filter,omitempty"`
	// Optional. Path template used to generate SPIFFE ID.
	PathTemplate string `protobuf:"bytes,4,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// Optional. Developer SVID TTL.
	SvidTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=svid_ttl,json=svidTtl,proto3" json:"svid_ttl,omitempty"`
}

func (x *AddDevIdentityPolicyRequest) Reset() {
	*x = AddDevIdentityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevIdentityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevIdentityPolicyRequest) ProtoMessage() {}

func (x *AddDevIdentityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevIdentityPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddDevIdentityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{1}
}

func (x *AddDevIdentityPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDevIdentityPolicyRequest) GetDevOidcConfigId() string {
	if x != nil {
		return x.DevOidcConfigId
	}
	return ""
}

func (x *AddDevIdentityPolicyRequest) GetClaimsFilter() *ClaimsFilter {
	if x != nil {
		return x.ClaimsFilter
	}
	return nil
}

func (x *AddDevIdentityPolicyRequest) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *AddDevIdentityPolicyRequest) GetSvidTtl() *durationpb.Duration {
	if x != nil {
		return x.SvidTtl
	}
	return nil
}

type AddDevIdentityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the created DevIdentity policy.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddDevIdentityPolicyResponse) Reset() {
	*x = AddDevIdentityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevIdentityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevIdentityPolicyResponse) ProtoMessage() {}

func (x *AddDevIdentityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevIdentityPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddDevIdentityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{2}
}

func (x *AddDevIdentityPolicyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateDevIdentityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the DevIdentity policy.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. DevOIDCConfig ID used for identity attestation.
	DevOidcConfigId string `protobuf:"bytes,2,opt,name=dev_oidc_config_id,json=devOidcConfigId,proto3" json:"dev_oidc_config_id,omitempty"`
	// Optional. Claims filters applied during identity attestation.
	ClaimsFilter *ClaimsFilter `protobuf:"bytes,3,opt,name=claims_filter,json=claimsFilter,proto3" json:"claims_filter,omitempty"`
	// Optional. Path template used to generate SPIFFE ID.
	PathTemplate string `protobuf:"bytes,4,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// Optional. Developer SVID TTL.
	SvidTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=svid_ttl,json=svidTtl,proto3" json:"svid_ttl,omitempty"`
}

func (x *UpdateDevIdentityPolicyRequest) Reset() {
	*x = UpdateDevIdentityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevIdentityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevIdentityPolicyRequest) ProtoMessage() {}

func (x *UpdateDevIdentityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevIdentityPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateDevIdentityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDevIdentityPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDevIdentityPolicyRequest) GetDevOidcConfigId() string {
	if x != nil {
		return x.DevOidcConfigId
	}
	return ""
}

func (x *UpdateDevIdentityPolicyRequest) GetClaimsFilter() *ClaimsFilter {
	if x != nil {
		return x.ClaimsFilter
	}
	return nil
}

func (x *UpdateDevIdentityPolicyRequest) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *UpdateDevIdentityPolicyRequest) GetSvidTtl() *durationpb.Duration {
	if x != nil {
		return x.SvidTtl
	}
	return nil
}

type UpdateDevIdentityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDevIdentityPolicyResponse) Reset() {
	*x = UpdateDevIdentityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevIdentityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevIdentityPolicyResponse) ProtoMessage() {}

func (x *UpdateDevIdentityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevIdentityPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateDevIdentityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{4}
}

type ListDevIdentityPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name filter.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDevIdentityPoliciesRequest) Reset() {
	*x = ListDevIdentityPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevIdentityPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevIdentityPoliciesRequest) ProtoMessage() {}

func (x *ListDevIdentityPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevIdentityPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListDevIdentityPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListDevIdentityPoliciesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDevIdentityPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*DevIDPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListDevIdentityPoliciesResponse) Reset() {
	*x = ListDevIdentityPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevIdentityPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevIdentityPoliciesResponse) ProtoMessage() {}

func (x *ListDevIdentityPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevIdentityPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListDevIdentityPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{6}
}

func (x *ListDevIdentityPoliciesResponse) GetPolicies() []*DevIDPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type DeleteDevIdentityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the DevIdentity policy to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDevIdentityPolicyRequest) Reset() {
	*x = DeleteDevIdentityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevIdentityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevIdentityPolicyRequest) ProtoMessage() {}

func (x *DeleteDevIdentityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevIdentityPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteDevIdentityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDevIdentityPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDevIdentityPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDevIdentityPolicyResponse) Reset() {
	*x = DeleteDevIdentityPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevIdentityPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevIdentityPolicyResponse) ProtoMessage() {}

func (x *DeleteDevIdentityPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevIdentityPolicyResponse.ProtoReflect.Descriptor instead.
func (*DeleteDevIdentityPolicyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{8}
}

type ClaimsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*ClaimFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ClaimsFilter) Reset() {
	*x = ClaimsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsFilter) ProtoMessage() {}

func (x *ClaimsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimsFilter.ProtoReflect.Descriptor instead.
func (*ClaimsFilter) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{9}
}

func (x *ClaimsFilter) GetFilters() []*ClaimFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ClaimFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Claim key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Required. Claim value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Required. Comparison operator.
	Operator ComparisonOperator `protobuf:"varint,3,opt,name=operator,proto3,enum=com.spirl.api.v1.devidentity.ComparisonOperator" json:"operator,omitempty"`
}

func (x *ClaimFilter) Reset() {
	*x = ClaimFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFilter) ProtoMessage() {}

func (x *ClaimFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFilter.ProtoReflect.Descriptor instead.
func (*ClaimFilter) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{10}
}

func (x *ClaimFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ClaimFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ClaimFilter) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_EQUAL
}

type DevOIDCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the DevOIDCConfig.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the DevOIDCConfig.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Issuer URL if the IDP.
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// Client ID for the IDP.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// OIDC client authentication method.
	ClientAuthMethod ClientAuthMethod `protobuf:"varint,5,opt,name=client_auth_method,json=clientAuthMethod,proto3,enum=com.spirl.api.v1.devidentity.ClientAuthMethod" json:"client_auth_method,omitempty"`
	// Client secret for the IDP.
	ClientSecret string `protobuf:"bytes,6,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Client private key ID for the IDP.
	ClientPrivateKeyId string `protobuf:"bytes,7,opt,name=client_private_key_id,json=clientPrivateKeyId,proto3" json:"client_private_key_id,omitempty"`
	// Client private key for the IDP.
	ClientPrivateKey string `protobuf:"bytes,8,opt,name=client_private_key,json=clientPrivateKey,proto3" json:"client_private_key,omitempty"`
}

func (x *DevOIDCConfig) Reset() {
	*x = DevOIDCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevOIDCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevOIDCConfig) ProtoMessage() {}

func (x *DevOIDCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevOIDCConfig.ProtoReflect.Descriptor instead.
func (*DevOIDCConfig) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{11}
}

func (x *DevOIDCConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DevOIDCConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DevOIDCConfig) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *DevOIDCConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DevOIDCConfig) GetClientAuthMethod() ClientAuthMethod {
	if x != nil {
		return x.ClientAuthMethod
	}
	return ClientAuthMethod_CLIENTAUTHMETHOD_NONE
}

func (x *DevOIDCConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *DevOIDCConfig) GetClientPrivateKeyId() string {
	if x != nil {
		return x.ClientPrivateKeyId
	}
	return ""
}

func (x *DevOIDCConfig) GetClientPrivateKey() string {
	if x != nil {
		return x.ClientPrivateKey
	}
	return ""
}

type AddDevIdentityOIDCConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the DevOIDCConfig.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Issuer URL of the IDP.
	IssuerUrl string `protobuf:"bytes,2,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// Required. Client ID for the IDP.
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Required. OIDC client authentication method.
	ClientAuthMethod ClientAuthMethod `protobuf:"varint,4,opt,name=client_auth_method,json=clientAuthMethod,proto3,enum=com.spirl.api.v1.devidentity.ClientAuthMethod" json:"client_auth_method,omitempty"`
	// Optional. Client secret for the IDP.
	ClientSecret string `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Optional. Client private key for the IDP.
	ClientPrivateKey string `protobuf:"bytes,6,opt,name=client_private_key,json=clientPrivateKey,proto3" json:"client_private_key,omitempty"`
	// Optional. Client private key ID for the IDP.
	ClientPrivateKeyId string `protobuf:"bytes,7,opt,name=client_private_key_id,json=clientPrivateKeyId,proto3" json:"client_private_key_id,omitempty"`
}

func (x *AddDevIdentityOIDCConfigRequest) Reset() {
	*x = AddDevIdentityOIDCConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevIdentityOIDCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevIdentityOIDCConfigRequest) ProtoMessage() {}

func (x *AddDevIdentityOIDCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevIdentityOIDCConfigRequest.ProtoReflect.Descriptor instead.
func (*AddDevIdentityOIDCConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{12}
}

func (x *AddDevIdentityOIDCConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDevIdentityOIDCConfigRequest) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *AddDevIdentityOIDCConfigRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AddDevIdentityOIDCConfigRequest) GetClientAuthMethod() ClientAuthMethod {
	if x != nil {
		return x.ClientAuthMethod
	}
	return ClientAuthMethod_CLIENTAUTHMETHOD_NONE
}

func (x *AddDevIdentityOIDCConfigRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AddDevIdentityOIDCConfigRequest) GetClientPrivateKey() string {
	if x != nil {
		return x.ClientPrivateKey
	}
	return ""
}

func (x *AddDevIdentityOIDCConfigRequest) GetClientPrivateKeyId() string {
	if x != nil {
		return x.ClientPrivateKeyId
	}
	return ""
}

type AddDevIdentityOIDCConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the created DevOIDCConfig.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddDevIdentityOIDCConfigResponse) Reset() {
	*x = AddDevIdentityOIDCConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevIdentityOIDCConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevIdentityOIDCConfigResponse) ProtoMessage() {}

func (x *AddDevIdentityOIDCConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevIdentityOIDCConfigResponse.ProtoReflect.Descriptor instead.
func (*AddDevIdentityOIDCConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{13}
}

func (x *AddDevIdentityOIDCConfigResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateDevIdentityOIDCConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the DevOIDCConfig.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Issuer URL of the IDP.
	IssuerUrl string `protobuf:"bytes,2,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// Optional. Client ID for the IDP.
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Optional. OIDC client authentication method.
	ClientAuthMethod *ClientAuthMethod `protobuf:"varint,4,opt,name=client_auth_method,json=clientAuthMethod,proto3,enum=com.spirl.api.v1.devidentity.ClientAuthMethod,oneof" json:"client_auth_method,omitempty"`
	// Optional. Client secret for the IDP.
	ClientSecret string `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Optional. Client private key for the IDP.
	ClientPrivateKey string `protobuf:"bytes,6,opt,name=client_private_key,json=clientPrivateKey,proto3" json:"client_private_key,omitempty"`
	// Optional. Client private key ID for the IDP.
	ClientPrivateKeyId string `protobuf:"bytes,7,opt,name=client_private_key_id,json=clientPrivateKeyId,proto3" json:"client_private_key_id,omitempty"`
}

func (x *UpdateDevIdentityOIDCConfigRequest) Reset() {
	*x = UpdateDevIdentityOIDCConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevIdentityOIDCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevIdentityOIDCConfigRequest) ProtoMessage() {}

func (x *UpdateDevIdentityOIDCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevIdentityOIDCConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateDevIdentityOIDCConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetClientAuthMethod() ClientAuthMethod {
	if x != nil && x.ClientAuthMethod != nil {
		return *x.ClientAuthMethod
	}
	return ClientAuthMethod_CLIENTAUTHMETHOD_NONE
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetClientPrivateKey() string {
	if x != nil {
		return x.ClientPrivateKey
	}
	return ""
}

func (x *UpdateDevIdentityOIDCConfigRequest) GetClientPrivateKeyId() string {
	if x != nil {
		return x.ClientPrivateKeyId
	}
	return ""
}

type UpdateDevIdentityOIDCConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDevIdentityOIDCConfigResponse) Reset() {
	*x = UpdateDevIdentityOIDCConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevIdentityOIDCConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevIdentityOIDCConfigResponse) ProtoMessage() {}

func (x *UpdateDevIdentityOIDCConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevIdentityOIDCConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateDevIdentityOIDCConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{15}
}

type ListDevIdentityOIDCConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name filter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDevIdentityOIDCConfigsRequest) Reset() {
	*x = ListDevIdentityOIDCConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevIdentityOIDCConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevIdentityOIDCConfigsRequest) ProtoMessage() {}

func (x *ListDevIdentityOIDCConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevIdentityOIDCConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListDevIdentityOIDCConfigsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListDevIdentityOIDCConfigsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDevIdentityOIDCConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*DevOIDCConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *ListDevIdentityOIDCConfigsResponse) Reset() {
	*x = ListDevIdentityOIDCConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevIdentityOIDCConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevIdentityOIDCConfigsResponse) ProtoMessage() {}

func (x *ListDevIdentityOIDCConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevIdentityOIDCConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListDevIdentityOIDCConfigsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListDevIdentityOIDCConfigsResponse) GetConfigs() []*DevOIDCConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type DeleteDevIdentityOIDCConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the DevOIDCConfig to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDevIdentityOIDCConfigRequest) Reset() {
	*x = DeleteDevIdentityOIDCConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevIdentityOIDCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevIdentityOIDCConfigRequest) ProtoMessage() {}

func (x *DeleteDevIdentityOIDCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevIdentityOIDCConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteDevIdentityOIDCConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteDevIdentityOIDCConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDevIdentityOIDCConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDevIdentityOIDCConfigResponse) Reset() {
	*x = DeleteDevIdentityOIDCConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevIdentityOIDCConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevIdentityOIDCConfigResponse) ProtoMessage() {}

func (x *DeleteDevIdentityOIDCConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevIdentityOIDCConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteDevIdentityOIDCConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{19}
}

type EnablePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the DevIdentity policy to enable.
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// Required. Trust Domain to enable the policy.
	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *EnablePolicyRequest) Reset() {
	*x = EnablePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePolicyRequest) ProtoMessage() {}

func (x *EnablePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePolicyRequest.ProtoReflect.Descriptor instead.
func (*EnablePolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{20}
}

func (x *EnablePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *EnablePolicyRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type EnablePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnablePolicyResponse) Reset() {
	*x = EnablePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePolicyResponse) ProtoMessage() {}

func (x *EnablePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePolicyResponse.ProtoReflect.Descriptor instead.
func (*EnablePolicyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{21}
}

type DisablePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Trust Domain to disable unified access.
	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *DisablePolicyRequest) Reset() {
	*x = DisablePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePolicyRequest) ProtoMessage() {}

func (x *DisablePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePolicyRequest.ProtoReflect.Descriptor instead.
func (*DisablePolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{22}
}

func (x *DisablePolicyRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type DisablePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disabled DevIdentity policy ID.
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (x *DisablePolicyResponse) Reset() {
	*x = DisablePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePolicyResponse) ProtoMessage() {}

func (x *DisablePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePolicyResponse.ProtoReflect.Descriptor instead.
func (*DisablePolicyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{23}
}

func (x *DisablePolicyResponse) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

type UnifiedAccessStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Trust Domain ID filter.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *UnifiedAccessStatusRequest) Reset() {
	*x = UnifiedAccessStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedAccessStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedAccessStatusRequest) ProtoMessage() {}

func (x *UnifiedAccessStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedAccessStatusRequest.ProtoReflect.Descriptor instead.
func (*UnifiedAccessStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{24}
}

func (x *UnifiedAccessStatusRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type UnifiedAccessStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of unified access configurations for every trust domain in the
	// organization.
	UnifiedAccessStatus []*UnifiedAccessStatus `protobuf:"bytes,1,rep,name=unified_access_status,json=unifiedAccessStatus,proto3" json:"unified_access_status,omitempty"`
}

func (x *UnifiedAccessStatusResponse) Reset() {
	*x = UnifiedAccessStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedAccessStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedAccessStatusResponse) ProtoMessage() {}

func (x *UnifiedAccessStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedAccessStatusResponse.ProtoReflect.Descriptor instead.
func (*UnifiedAccessStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{25}
}

func (x *UnifiedAccessStatusResponse) GetUnifiedAccessStatus() []*UnifiedAccessStatus {
	if x != nil {
		return x.UnifiedAccessStatus
	}
	return nil
}

type UnifiedAccessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trust Domain ID.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Trust Domain name.
	TrustDomainName string `protobuf:"bytes,2,opt,name=trust_domain_name,json=trustDomainName,proto3" json:"trust_domain_name,omitempty"`
	// Whether unified access is enabled or not.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Enabled DevIdentity policy ID.
	EnabledPolicyId string `protobuf:"bytes,4,opt,name=enabled_policy_id,json=enabledPolicyId,proto3" json:"enabled_policy_id,omitempty"`
	// DevIdentity policy name.
	EnabledPolicyName string `protobuf:"bytes,5,opt,name=enabled_policy_name,json=enabledPolicyName,proto3" json:"enabled_policy_name,omitempty"`
}

func (x *UnifiedAccessStatus) Reset() {
	*x = UnifiedAccessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedAccessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedAccessStatus) ProtoMessage() {}

func (x *UnifiedAccessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedAccessStatus.ProtoReflect.Descriptor instead.
func (*UnifiedAccessStatus) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{26}
}

func (x *UnifiedAccessStatus) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *UnifiedAccessStatus) GetTrustDomainName() string {
	if x != nil {
		return x.TrustDomainName
	}
	return ""
}

func (x *UnifiedAccessStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UnifiedAccessStatus) GetEnabledPolicyId() string {
	if x != nil {
		return x.EnabledPolicyId
	}
	return ""
}

func (x *UnifiedAccessStatus) GetEnabledPolicyName() string {
	if x != nil {
		return x.EnabledPolicyName
	}
	return ""
}

// Represents a public key in PKIX, ASN.1 DER form.
type PKIXPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PKIXPublicKey) Reset() {
	*x = PKIXPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_devidentityapi_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKIXPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKIXPublicKey) ProtoMessage() {}

func (x *PKIXPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_devidentityapi_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKIXPublicKey.ProtoReflect.Descriptor instead.
func (*PKIXPublicKey) Descriptor() ([]byte, []int) {
	return file_api_v1_devidentityapi_api_proto_rawDescGZIP(), []int{27}
}

func (x *PKIXPublicKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_v1_devidentityapi_api_proto protoreflect.FileDescriptor

var file_api_v1_devidentityapi_api_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x49, 0x44, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x76, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x76, 0x69, 0x64, 0x5f,
	0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x76, 0x69, 0x64, 0x54, 0x74, 0x6c, 0x22, 0x8a, 0x02,
	0x0a, 0x1b, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x76, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x76, 0x69, 0x64, 0x54, 0x74, 0x6c, 0x22, 0x2e, 0x0a, 0x1c, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x64, 0x65, 0x76, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x4f, 0x69,
	0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x76, 0x69, 0x64, 0x54, 0x74, 0x6c, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x68, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x49, 0x44, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53,
	0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x0d, 0x44, 0x65,
	0x76, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0xdd, 0x02, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x00, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x32, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xf8, 0x02, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x00, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x00,
	0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x25,
	0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b,
	0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x22, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x14,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x15,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x1a, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x1b, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x15,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x50, 0x4b, 0x49, 0x58, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x2e, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0xe0, 0x01, 0x0a, 0x10, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x03,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x54, 0x48, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4b, 0x45, 0x59, 0x5f,
	0x4a, 0x57, 0x54, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x41,
	0x55, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x05, 0x32, 0xe6, 0x0c,
	0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44,
	0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_devidentityapi_api_proto_rawDescOnce sync.Once
	file_api_v1_devidentityapi_api_proto_rawDescData = file_api_v1_devidentityapi_api_proto_rawDesc
)

func file_api_v1_devidentityapi_api_proto_rawDescGZIP() []byte {
	file_api_v1_devidentityapi_api_proto_rawDescOnce.Do(func() {
		file_api_v1_devidentityapi_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_devidentityapi_api_proto_rawDescData)
	})
	return file_api_v1_devidentityapi_api_proto_rawDescData
}

var file_api_v1_devidentityapi_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1_devidentityapi_api_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_api_v1_devidentityapi_api_proto_goTypes = []any{
	(ComparisonOperator)(0),                     // 0: com.spirl.api.v1.devidentity.ComparisonOperator
	(ClientAuthMethod)(0),                       // 1: com.spirl.api.v1.devidentity.ClientAuthMethod
	(*DevIDPolicy)(nil),                         // 2: com.spirl.api.v1.devidentity.DevIDPolicy
	(*AddDevIdentityPolicyRequest)(nil),         // 3: com.spirl.api.v1.devidentity.AddDevIdentityPolicyRequest
	(*AddDevIdentityPolicyResponse)(nil),        // 4: com.spirl.api.v1.devidentity.AddDevIdentityPolicyResponse
	(*UpdateDevIdentityPolicyRequest)(nil),      // 5: com.spirl.api.v1.devidentity.UpdateDevIdentityPolicyRequest
	(*UpdateDevIdentityPolicyResponse)(nil),     // 6: com.spirl.api.v1.devidentity.UpdateDevIdentityPolicyResponse
	(*ListDevIdentityPoliciesRequest)(nil),      // 7: com.spirl.api.v1.devidentity.ListDevIdentityPoliciesRequest
	(*ListDevIdentityPoliciesResponse)(nil),     // 8: com.spirl.api.v1.devidentity.ListDevIdentityPoliciesResponse
	(*DeleteDevIdentityPolicyRequest)(nil),      // 9: com.spirl.api.v1.devidentity.DeleteDevIdentityPolicyRequest
	(*DeleteDevIdentityPolicyResponse)(nil),     // 10: com.spirl.api.v1.devidentity.DeleteDevIdentityPolicyResponse
	(*ClaimsFilter)(nil),                        // 11: com.spirl.api.v1.devidentity.ClaimsFilter
	(*ClaimFilter)(nil),                         // 12: com.spirl.api.v1.devidentity.ClaimFilter
	(*DevOIDCConfig)(nil),                       // 13: com.spirl.api.v1.devidentity.DevOIDCConfig
	(*AddDevIdentityOIDCConfigRequest)(nil),     // 14: com.spirl.api.v1.devidentity.AddDevIdentityOIDCConfigRequest
	(*AddDevIdentityOIDCConfigResponse)(nil),    // 15: com.spirl.api.v1.devidentity.AddDevIdentityOIDCConfigResponse
	(*UpdateDevIdentityOIDCConfigRequest)(nil),  // 16: com.spirl.api.v1.devidentity.UpdateDevIdentityOIDCConfigRequest
	(*UpdateDevIdentityOIDCConfigResponse)(nil), // 17: com.spirl.api.v1.devidentity.UpdateDevIdentityOIDCConfigResponse
	(*ListDevIdentityOIDCConfigsRequest)(nil),   // 18: com.spirl.api.v1.devidentity.ListDevIdentityOIDCConfigsRequest
	(*ListDevIdentityOIDCConfigsResponse)(nil),  // 19: com.spirl.api.v1.devidentity.ListDevIdentityOIDCConfigsResponse
	(*DeleteDevIdentityOIDCConfigRequest)(nil),  // 20: com.spirl.api.v1.devidentity.DeleteDevIdentityOIDCConfigRequest
	(*DeleteDevIdentityOIDCConfigResponse)(nil), // 21: com.spirl.api.v1.devidentity.DeleteDevIdentityOIDCConfigResponse
	(*EnablePolicyRequest)(nil),                 // 22: com.spirl.api.v1.devidentity.EnablePolicyRequest
	(*EnablePolicyResponse)(nil),                // 23: com.spirl.api.v1.devidentity.EnablePolicyResponse
	(*DisablePolicyRequest)(nil),                // 24: com.spirl.api.v1.devidentity.DisablePolicyRequest
	(*DisablePolicyResponse)(nil),               // 25: com.spirl.api.v1.devidentity.DisablePolicyResponse
	(*UnifiedAccessStatusRequest)(nil),          // 26: com.spirl.api.v1.devidentity.UnifiedAccessStatusRequest
	(*UnifiedAccessStatusResponse)(nil),         // 27: com.spirl.api.v1.devidentity.UnifiedAccessStatusResponse
	(*UnifiedAccessStatus)(nil),                 // 28: com.spirl.api.v1.devidentity.UnifiedAccessStatus
	(*PKIXPublicKey)(nil),                       // 29: com.spirl.api.v1.devidentity.PKIXPublicKey
	(*durationpb.Duration)(nil),                 // 30: google.protobuf.Duration
}
var file_api_v1_devidentityapi_api_proto_depIdxs = []int32{
	11, // 0: com.spirl.api.v1.devidentity.DevIDPolicy.claims_filter:type_name -> com.spirl.api.v1.devidentity.ClaimsFilter
	30, // 1: com.spirl.api.v1.devidentity.DevIDPolicy.svid_ttl:type_name -> google.protobuf.Duration
	11, // 2: com.spirl.api.v1.devidentity.AddDevIdentityPolicyRequest.claims_filter:type_name -> com.spirl.api.v1.devidentity.ClaimsFilter
	30, // 3: com.spirl.api.v1.devidentity.AddDevIdentityPolicyRequest.svid_ttl:type_name -> google.protobuf.Duration
	11, // 4: com.spirl.api.v1.devidentity.UpdateDevIdentityPolicyRequest.claims_filter:type_name -> com.spirl.api.v1.devidentity.ClaimsFilter
	30, // 5: com.spirl.api.v1.devidentity.UpdateDevIdentityPolicyRequest.svid_ttl:type_name -> google.protobuf.Duration
	2,  // 6: com.spirl.api.v1.devidentity.ListDevIdentityPoliciesResponse.policies:type_name -> com.spirl.api.v1.devidentity.DevIDPolicy
	12, // 7: com.spirl.api.v1.devidentity.ClaimsFilter.filters:type_name -> com.spirl.api.v1.devidentity.ClaimFilter
	0,  // 8: com.spirl.api.v1.devidentity.ClaimFilter.operator:type_name -> com.spirl.api.v1.devidentity.ComparisonOperator
	1,  // 9: com.spirl.api.v1.devidentity.DevOIDCConfig.client_auth_method:type_name -> com.spirl.api.v1.devidentity.ClientAuthMethod
	1,  // 10: com.spirl.api.v1.devidentity.AddDevIdentityOIDCConfigRequest.client_auth_method:type_name -> com.spirl.api.v1.devidentity.ClientAuthMethod
	1,  // 11: com.spirl.api.v1.devidentity.UpdateDevIdentityOIDCConfigRequest.client_auth_method:type_name -> com.spirl.api.v1.devidentity.ClientAuthMethod
	13, // 12: com.spirl.api.v1.devidentity.ListDevIdentityOIDCConfigsResponse.configs:type_name -> com.spirl.api.v1.devidentity.DevOIDCConfig
	28, // 13: com.spirl.api.v1.devidentity.UnifiedAccessStatusResponse.unified_access_status:type_name -> com.spirl.api.v1.devidentity.UnifiedAccessStatus
	3,  // 14: com.spirl.api.v1.devidentity.API.AddDevIdentityPolicy:input_type -> com.spirl.api.v1.devidentity.AddDevIdentityPolicyRequest
	5,  // 15: com.spirl.api.v1.devidentity.API.UpdateDevIdentityPolicy:input_type -> com.spirl.api.v1.devidentity.UpdateDevIdentityPolicyRequest
	7,  // 16: com.spirl.api.v1.devidentity.API.ListDevIdentityPolicies:input_type -> com.spirl.api.v1.devidentity.ListDevIdentityPoliciesRequest
	9,  // 17: com.spirl.api.v1.devidentity.API.DeleteDevIdentityPolicy:input_type -> com.spirl.api.v1.devidentity.DeleteDevIdentityPolicyRequest
	14, // 18: com.spirl.api.v1.devidentity.API.AddDevIdentityOIDCConfig:input_type -> com.spirl.api.v1.devidentity.AddDevIdentityOIDCConfigRequest
	16, // 19: com.spirl.api.v1.devidentity.API.UpdateDevIdentityOIDCConfig:input_type -> com.spirl.api.v1.devidentity.UpdateDevIdentityOIDCConfigRequest
	18, // 20: com.spirl.api.v1.devidentity.API.ListDevIdentityOIDCConfigs:input_type -> com.spirl.api.v1.devidentity.ListDevIdentityOIDCConfigsRequest
	20, // 21: com.spirl.api.v1.devidentity.API.DeleteDevIdentityOIDCConfig:input_type -> com.spirl.api.v1.devidentity.DeleteDevIdentityOIDCConfigRequest
	22, // 22: com.spirl.api.v1.devidentity.API.EnablePolicy:input_type -> com.spirl.api.v1.devidentity.EnablePolicyRequest
	24, // 23: com.spirl.api.v1.devidentity.API.DisablePolicy:input_type -> com.spirl.api.v1.devidentity.DisablePolicyRequest
	26, // 24: com.spirl.api.v1.devidentity.API.UnifiedAccessStatus:input_type -> com.spirl.api.v1.devidentity.UnifiedAccessStatusRequest
	4,  // 25: com.spirl.api.v1.devidentity.API.AddDevIdentityPolicy:output_type -> com.spirl.api.v1.devidentity.AddDevIdentityPolicyResponse
	6,  // 26: com.spirl.api.v1.devidentity.API.UpdateDevIdentityPolicy:output_type -> com.spirl.api.v1.devidentity.UpdateDevIdentityPolicyResponse
	8,  // 27: com.spirl.api.v1.devidentity.API.ListDevIdentityPolicies:output_type -> com.spirl.api.v1.devidentity.ListDevIdentityPoliciesResponse
	10, // 28: com.spirl.api.v1.devidentity.API.DeleteDevIdentityPolicy:output_type -> com.spirl.api.v1.devidentity.DeleteDevIdentityPolicyResponse
	15, // 29: com.spirl.api.v1.devidentity.API.AddDevIdentityOIDCConfig:output_type -> com.spirl.api.v1.devidentity.AddDevIdentityOIDCConfigResponse
	17, // 30: com.spirl.api.v1.devidentity.API.UpdateDevIdentityOIDCConfig:output_type -> com.spirl.api.v1.devidentity.UpdateDevIdentityOIDCConfigResponse
	19, // 31: com.spirl.api.v1.devidentity.API.ListDevIdentityOIDCConfigs:output_type -> com.spirl.api.v1.devidentity.ListDevIdentityOIDCConfigsResponse
	21, // 32: com.spirl.api.v1.devidentity.API.DeleteDevIdentityOIDCConfig:output_type -> com.spirl.api.v1.devidentity.DeleteDevIdentityOIDCConfigResponse
	23, // 33: com.spirl.api.v1.devidentity.API.EnablePolicy:output_type -> com.spirl.api.v1.devidentity.EnablePolicyResponse
	25, // 34: com.spirl.api.v1.devidentity.API.DisablePolicy:output_type -> com.spirl.api.v1.devidentity.DisablePolicyResponse
	27, // 35: com.spirl.api.v1.devidentity.API.UnifiedAccessStatus:output_type -> com.spirl.api.v1.devidentity.UnifiedAccessStatusResponse
	25, // [25:36] is the sub-list for method output_type
	14, // [14:25] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_v1_devidentityapi_api_proto_init() }
func file_api_v1_devidentityapi_api_proto_init() {
	if File_api_v1_devidentityapi_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_devidentityapi_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DevIDPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddDevIdentityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddDevIdentityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDevIdentityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDevIdentityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListDevIdentityPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListDevIdentityPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDevIdentityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDevIdentityPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DevOIDCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AddDevIdentityOIDCConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AddDevIdentityOIDCConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDevIdentityOIDCConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDevIdentityOIDCConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListDevIdentityOIDCConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListDevIdentityOIDCConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDevIdentityOIDCConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDevIdentityOIDCConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*EnablePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*EnablePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DisablePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DisablePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UnifiedAccessStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UnifiedAccessStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*UnifiedAccessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_devidentityapi_api_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PKIXPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_devidentityapi_api_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_devidentityapi_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_devidentityapi_api_proto_goTypes,
		DependencyIndexes: file_api_v1_devidentityapi_api_proto_depIdxs,
		EnumInfos:         file_api_v1_devidentityapi_api_proto_enumTypes,
		MessageInfos:      file_api_v1_devidentityapi_api_proto_msgTypes,
	}.Build()
	File_api_v1_devidentityapi_api_proto = out.File
	file_api_v1_devidentityapi_api_proto_rawDesc = nil
	file_api_v1_devidentityapi_api_proto_goTypes = nil
	file_api_v1_devidentityapi_api_proto_depIdxs = nil
}
