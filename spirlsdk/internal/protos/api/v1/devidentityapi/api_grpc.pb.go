// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/devidentityapi/api.proto

package devidentityapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_AddDevIdentityPolicy_FullMethodName        = "/com.spirl.api.v1.devidentity.API/AddDevIdentityPolicy"
	API_UpdateDevIdentityPolicy_FullMethodName     = "/com.spirl.api.v1.devidentity.API/UpdateDevIdentityPolicy"
	API_ListDevIdentityPolicies_FullMethodName     = "/com.spirl.api.v1.devidentity.API/ListDevIdentityPolicies"
	API_DeleteDevIdentityPolicy_FullMethodName     = "/com.spirl.api.v1.devidentity.API/DeleteDevIdentityPolicy"
	API_AddDevIdentityOIDCConfig_FullMethodName    = "/com.spirl.api.v1.devidentity.API/AddDevIdentityOIDCConfig"
	API_UpdateDevIdentityOIDCConfig_FullMethodName = "/com.spirl.api.v1.devidentity.API/UpdateDevIdentityOIDCConfig"
	API_ListDevIdentityOIDCConfigs_FullMethodName  = "/com.spirl.api.v1.devidentity.API/ListDevIdentityOIDCConfigs"
	API_DeleteDevIdentityOIDCConfig_FullMethodName = "/com.spirl.api.v1.devidentity.API/DeleteDevIdentityOIDCConfig"
	API_EnablePolicy_FullMethodName                = "/com.spirl.api.v1.devidentity.API/EnablePolicy"
	API_DisablePolicy_FullMethodName               = "/com.spirl.api.v1.devidentity.API/DisablePolicy"
	API_UnifiedAccessStatus_FullMethodName         = "/com.spirl.api.v1.devidentity.API/UnifiedAccessStatus"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Creates a new DevIdentity policy.
	AddDevIdentityPolicy(ctx context.Context, in *AddDevIdentityPolicyRequest, opts ...grpc.CallOption) (*AddDevIdentityPolicyResponse, error)
	// Updates a DevIdentity policy.
	UpdateDevIdentityPolicy(ctx context.Context, in *UpdateDevIdentityPolicyRequest, opts ...grpc.CallOption) (*UpdateDevIdentityPolicyResponse, error)
	// List DevIdentity policies using optional filters.
	ListDevIdentityPolicies(ctx context.Context, in *ListDevIdentityPoliciesRequest, opts ...grpc.CallOption) (*ListDevIdentityPoliciesResponse, error)
	// Deletes a DevIdentity policy.
	DeleteDevIdentityPolicy(ctx context.Context, in *DeleteDevIdentityPolicyRequest, opts ...grpc.CallOption) (*DeleteDevIdentityPolicyResponse, error)
	// Creates a new DevIdentity OIDC configuration.
	AddDevIdentityOIDCConfig(ctx context.Context, in *AddDevIdentityOIDCConfigRequest, opts ...grpc.CallOption) (*AddDevIdentityOIDCConfigResponse, error)
	// Updates a DevIdentity OIDC configuration.
	UpdateDevIdentityOIDCConfig(ctx context.Context, in *UpdateDevIdentityOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateDevIdentityOIDCConfigResponse, error)
	// List DevIdentity OIDC configurations using optional filters.
	ListDevIdentityOIDCConfigs(ctx context.Context, in *ListDevIdentityOIDCConfigsRequest, opts ...grpc.CallOption) (*ListDevIdentityOIDCConfigsResponse, error)
	// Deletes a DevIdentity OIDC configuration.
	DeleteDevIdentityOIDCConfig(ctx context.Context, in *DeleteDevIdentityOIDCConfigRequest, opts ...grpc.CallOption) (*DeleteDevIdentityOIDCConfigResponse, error)
	// Enable a policy for a Trust Domain.
	EnablePolicy(ctx context.Context, in *EnablePolicyRequest, opts ...grpc.CallOption) (*EnablePolicyResponse, error)
	// Disable a policy for a Trust Domain.
	DisablePolicy(ctx context.Context, in *DisablePolicyRequest, opts ...grpc.CallOption) (*DisablePolicyResponse, error)
	// Get the status of unified access configurations for every trust domain in
	// the organization.
	UnifiedAccessStatus(ctx context.Context, in *UnifiedAccessStatusRequest, opts ...grpc.CallOption) (*UnifiedAccessStatusResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) AddDevIdentityPolicy(ctx context.Context, in *AddDevIdentityPolicyRequest, opts ...grpc.CallOption) (*AddDevIdentityPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDevIdentityPolicyResponse)
	err := c.cc.Invoke(ctx, API_AddDevIdentityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateDevIdentityPolicy(ctx context.Context, in *UpdateDevIdentityPolicyRequest, opts ...grpc.CallOption) (*UpdateDevIdentityPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDevIdentityPolicyResponse)
	err := c.cc.Invoke(ctx, API_UpdateDevIdentityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListDevIdentityPolicies(ctx context.Context, in *ListDevIdentityPoliciesRequest, opts ...grpc.CallOption) (*ListDevIdentityPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevIdentityPoliciesResponse)
	err := c.cc.Invoke(ctx, API_ListDevIdentityPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteDevIdentityPolicy(ctx context.Context, in *DeleteDevIdentityPolicyRequest, opts ...grpc.CallOption) (*DeleteDevIdentityPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDevIdentityPolicyResponse)
	err := c.cc.Invoke(ctx, API_DeleteDevIdentityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddDevIdentityOIDCConfig(ctx context.Context, in *AddDevIdentityOIDCConfigRequest, opts ...grpc.CallOption) (*AddDevIdentityOIDCConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDevIdentityOIDCConfigResponse)
	err := c.cc.Invoke(ctx, API_AddDevIdentityOIDCConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateDevIdentityOIDCConfig(ctx context.Context, in *UpdateDevIdentityOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateDevIdentityOIDCConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDevIdentityOIDCConfigResponse)
	err := c.cc.Invoke(ctx, API_UpdateDevIdentityOIDCConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListDevIdentityOIDCConfigs(ctx context.Context, in *ListDevIdentityOIDCConfigsRequest, opts ...grpc.CallOption) (*ListDevIdentityOIDCConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevIdentityOIDCConfigsResponse)
	err := c.cc.Invoke(ctx, API_ListDevIdentityOIDCConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteDevIdentityOIDCConfig(ctx context.Context, in *DeleteDevIdentityOIDCConfigRequest, opts ...grpc.CallOption) (*DeleteDevIdentityOIDCConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDevIdentityOIDCConfigResponse)
	err := c.cc.Invoke(ctx, API_DeleteDevIdentityOIDCConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EnablePolicy(ctx context.Context, in *EnablePolicyRequest, opts ...grpc.CallOption) (*EnablePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnablePolicyResponse)
	err := c.cc.Invoke(ctx, API_EnablePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DisablePolicy(ctx context.Context, in *DisablePolicyRequest, opts ...grpc.CallOption) (*DisablePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisablePolicyResponse)
	err := c.cc.Invoke(ctx, API_DisablePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UnifiedAccessStatus(ctx context.Context, in *UnifiedAccessStatusRequest, opts ...grpc.CallOption) (*UnifiedAccessStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnifiedAccessStatusResponse)
	err := c.cc.Invoke(ctx, API_UnifiedAccessStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	// Creates a new DevIdentity policy.
	AddDevIdentityPolicy(context.Context, *AddDevIdentityPolicyRequest) (*AddDevIdentityPolicyResponse, error)
	// Updates a DevIdentity policy.
	UpdateDevIdentityPolicy(context.Context, *UpdateDevIdentityPolicyRequest) (*UpdateDevIdentityPolicyResponse, error)
	// List DevIdentity policies using optional filters.
	ListDevIdentityPolicies(context.Context, *ListDevIdentityPoliciesRequest) (*ListDevIdentityPoliciesResponse, error)
	// Deletes a DevIdentity policy.
	DeleteDevIdentityPolicy(context.Context, *DeleteDevIdentityPolicyRequest) (*DeleteDevIdentityPolicyResponse, error)
	// Creates a new DevIdentity OIDC configuration.
	AddDevIdentityOIDCConfig(context.Context, *AddDevIdentityOIDCConfigRequest) (*AddDevIdentityOIDCConfigResponse, error)
	// Updates a DevIdentity OIDC configuration.
	UpdateDevIdentityOIDCConfig(context.Context, *UpdateDevIdentityOIDCConfigRequest) (*UpdateDevIdentityOIDCConfigResponse, error)
	// List DevIdentity OIDC configurations using optional filters.
	ListDevIdentityOIDCConfigs(context.Context, *ListDevIdentityOIDCConfigsRequest) (*ListDevIdentityOIDCConfigsResponse, error)
	// Deletes a DevIdentity OIDC configuration.
	DeleteDevIdentityOIDCConfig(context.Context, *DeleteDevIdentityOIDCConfigRequest) (*DeleteDevIdentityOIDCConfigResponse, error)
	// Enable a policy for a Trust Domain.
	EnablePolicy(context.Context, *EnablePolicyRequest) (*EnablePolicyResponse, error)
	// Disable a policy for a Trust Domain.
	DisablePolicy(context.Context, *DisablePolicyRequest) (*DisablePolicyResponse, error)
	// Get the status of unified access configurations for every trust domain in
	// the organization.
	UnifiedAccessStatus(context.Context, *UnifiedAccessStatusRequest) (*UnifiedAccessStatusResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) AddDevIdentityPolicy(context.Context, *AddDevIdentityPolicyRequest) (*AddDevIdentityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevIdentityPolicy not implemented")
}
func (UnimplementedAPIServer) UpdateDevIdentityPolicy(context.Context, *UpdateDevIdentityPolicyRequest) (*UpdateDevIdentityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevIdentityPolicy not implemented")
}
func (UnimplementedAPIServer) ListDevIdentityPolicies(context.Context, *ListDevIdentityPoliciesRequest) (*ListDevIdentityPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevIdentityPolicies not implemented")
}
func (UnimplementedAPIServer) DeleteDevIdentityPolicy(context.Context, *DeleteDevIdentityPolicyRequest) (*DeleteDevIdentityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevIdentityPolicy not implemented")
}
func (UnimplementedAPIServer) AddDevIdentityOIDCConfig(context.Context, *AddDevIdentityOIDCConfigRequest) (*AddDevIdentityOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevIdentityOIDCConfig not implemented")
}
func (UnimplementedAPIServer) UpdateDevIdentityOIDCConfig(context.Context, *UpdateDevIdentityOIDCConfigRequest) (*UpdateDevIdentityOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevIdentityOIDCConfig not implemented")
}
func (UnimplementedAPIServer) ListDevIdentityOIDCConfigs(context.Context, *ListDevIdentityOIDCConfigsRequest) (*ListDevIdentityOIDCConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevIdentityOIDCConfigs not implemented")
}
func (UnimplementedAPIServer) DeleteDevIdentityOIDCConfig(context.Context, *DeleteDevIdentityOIDCConfigRequest) (*DeleteDevIdentityOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevIdentityOIDCConfig not implemented")
}
func (UnimplementedAPIServer) EnablePolicy(context.Context, *EnablePolicyRequest) (*EnablePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePolicy not implemented")
}
func (UnimplementedAPIServer) DisablePolicy(context.Context, *DisablePolicyRequest) (*DisablePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePolicy not implemented")
}
func (UnimplementedAPIServer) UnifiedAccessStatus(context.Context, *UnifiedAccessStatusRequest) (*UnifiedAccessStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnifiedAccessStatus not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_AddDevIdentityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDevIdentityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddDevIdentityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_AddDevIdentityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddDevIdentityPolicy(ctx, req.(*AddDevIdentityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateDevIdentityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDevIdentityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateDevIdentityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_UpdateDevIdentityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateDevIdentityPolicy(ctx, req.(*UpdateDevIdentityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListDevIdentityPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevIdentityPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListDevIdentityPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListDevIdentityPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListDevIdentityPolicies(ctx, req.(*ListDevIdentityPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteDevIdentityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDevIdentityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteDevIdentityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteDevIdentityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteDevIdentityPolicy(ctx, req.(*DeleteDevIdentityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddDevIdentityOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDevIdentityOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddDevIdentityOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_AddDevIdentityOIDCConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddDevIdentityOIDCConfig(ctx, req.(*AddDevIdentityOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateDevIdentityOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDevIdentityOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateDevIdentityOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_UpdateDevIdentityOIDCConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateDevIdentityOIDCConfig(ctx, req.(*UpdateDevIdentityOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListDevIdentityOIDCConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevIdentityOIDCConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListDevIdentityOIDCConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListDevIdentityOIDCConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListDevIdentityOIDCConfigs(ctx, req.(*ListDevIdentityOIDCConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteDevIdentityOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDevIdentityOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteDevIdentityOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteDevIdentityOIDCConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteDevIdentityOIDCConfig(ctx, req.(*DeleteDevIdentityOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EnablePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EnablePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_EnablePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EnablePolicy(ctx, req.(*EnablePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DisablePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DisablePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DisablePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DisablePolicy(ctx, req.(*DisablePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UnifiedAccessStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnifiedAccessStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UnifiedAccessStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_UnifiedAccessStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UnifiedAccessStatus(ctx, req.(*UnifiedAccessStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.spirl.api.v1.devidentity.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevIdentityPolicy",
			Handler:    _API_AddDevIdentityPolicy_Handler,
		},
		{
			MethodName: "UpdateDevIdentityPolicy",
			Handler:    _API_UpdateDevIdentityPolicy_Handler,
		},
		{
			MethodName: "ListDevIdentityPolicies",
			Handler:    _API_ListDevIdentityPolicies_Handler,
		},
		{
			MethodName: "DeleteDevIdentityPolicy",
			Handler:    _API_DeleteDevIdentityPolicy_Handler,
		},
		{
			MethodName: "AddDevIdentityOIDCConfig",
			Handler:    _API_AddDevIdentityOIDCConfig_Handler,
		},
		{
			MethodName: "UpdateDevIdentityOIDCConfig",
			Handler:    _API_UpdateDevIdentityOIDCConfig_Handler,
		},
		{
			MethodName: "ListDevIdentityOIDCConfigs",
			Handler:    _API_ListDevIdentityOIDCConfigs_Handler,
		},
		{
			MethodName: "DeleteDevIdentityOIDCConfig",
			Handler:    _API_DeleteDevIdentityOIDCConfig_Handler,
		},
		{
			MethodName: "EnablePolicy",
			Handler:    _API_EnablePolicy_Handler,
		},
		{
			MethodName: "DisablePolicy",
			Handler:    _API_DisablePolicy_Handler,
		},
		{
			MethodName: "UnifiedAccessStatus",
			Handler:    _API_UnifiedAccessStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/devidentityapi/api.proto",
}
