// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/sessionapi/api.proto

package sessionapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_Login_FullMethodName                      = "/com.spirl.api.v1.session.API/Login"
	API_AuthenticateServiceAccount_FullMethodName = "/com.spirl.api.v1.session.API/AuthenticateServiceAccount"
	API_Whoami_FullMethodName                     = "/com.spirl.api.v1.session.API/Whoami"
	API_ListOrgs_FullMethodName                   = "/com.spirl.api.v1.session.API/ListOrgs"
	API_Logout_FullMethodName                     = "/com.spirl.api.v1.session.API/Logout"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Implements the SSO login flow.
	//
	// The login flow is a typical OAuth2 authorization code flow. The flow
	// involves a user-agent (i.e. web browser) that can, but does not need to,
	// exist next to the command line.
	//
	// The browser-enabled flow is as follows:
	// 1. The initiator (e.g. spirlctl) opens a Login stream with the control
	// plane.
	//  2. The initiator sends a StartLoginRequest with the email address of the
	//     user and the local redirect URI it will use to receive the authorization
	//     code from the authorization server.
	//  3. The control-plane responds with a StartLoginResponse containing the URL
	//     that the initiator should direct the user to in order to login and/or
	//     authorize the control-plane to obtain an ID token from the authorization
	//     server on the user's behalf.
	//  4. The initiator opens a user-agent (i.e. browser) to that URL. The user
	//     completes the authorization. The authorization server redirects the
	//     browser back to the initiator. The authorization code is contained
	//     in the redirect URI.
	//  5. The initiator sends the FinishLoginRequest with the redirect URI
	//     containing the authorization code (and some other things opaque to
	//     the initiator).
	//  6. The control-plane exchanges the code with the authorization server
	//     for an ID token using it's OAuth2 client credentials.
	//  7. The control-plane mints a SPIRL auth token.
	//  8. The control-plane sends a FinishLoginResponse back to the initiator
	//     containing the SPIRL auth token.
	Login(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LoginRequest, LoginResponse], error)
	// AuthenticateServiceAccount establishes a new session for the client using a
	// service account key. It is structured as a two-request, two-response
	// streaming RPC. To perform authentication, the client needs to prove
	// possession of an valid and enabled service account key.
	//
	// The first client request is a "ServiceAccountKeyLogin" request. It includes
	// the ID of the service account key the client targets. The service account
	// key id determines what key the client needs to be in possession of.
	//
	// The first server response contains a key proof-of-possession challenge
	// with a server-side nonce (Ns).
	//
	// The second client request is an "ServiceAccountKeyAuthorize" request. It
	// includes the key proof of the service account key key.
	//
	// The second server response contains the session information the
	// client can use for future authentication against the SPIRL cloud API.
	//
	// In summary, the flow is as follows:
	// 1. Client ----> (key_id) ---------> Server
	// 2. Client <---- (server_nonce) <--------------- Server
	// 3. Client ----> (key_proof) ---> Server
	// 3. Client <---- (session_info) <--------------- Server
	//
	// To form the key proof (KP), the client does the following:
	//  1. Generates its own client nonce (Nc)
	//  2. Computes the key proof hash (H), where:
	//     H = SHA512(Ns || Nc)
	//  3. Signs the key proof hash with the service account private key (Kr) to
	//     produce the key proof signature (S):
	//     S = Sign(H, Kr)
	//
	// The key proof is composed of the the tuple [S, Nc]:
	//
	//	KP = [S, Nc]
	//
	// To verify the key proof (KP), the server does the following:
	//  1. Looks up the service account public key (Ku)
	//  2. Computes the key proof hash (H) using the same algorithm as the client.
	//     The server is already in possession of the server nonce (Ns) and obtains
	//     the client nonce (Nc)from the "ServiceAccountKeyAuthorize" request.
	//  3. Verifies the signature S over H using the service account public key
	//
	// (Ku).
	AuthenticateServiceAccount(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse], error)
	// Verifies the identity token of the authenticated client and returns
	// identity information (user or service account) and other metadata.
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error)
	// Shows organizations that the current user or service accounts is part of
	ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error)
	// Logs out the authenticated entity, invalidating its auth session.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Login(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LoginRequest, LoginResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], API_Login_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoginRequest, LoginResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_LoginClient = grpc.BidiStreamingClient[LoginRequest, LoginResponse]

func (c *aPIClient) AuthenticateServiceAccount(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], API_AuthenticateServiceAccount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_AuthenticateServiceAccountClient = grpc.BidiStreamingClient[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse]

func (c *aPIClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoamiResponse)
	err := c.cc.Invoke(ctx, API_Whoami_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrgsResponse)
	err := c.cc.Invoke(ctx, API_ListOrgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, API_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	// Implements the SSO login flow.
	//
	// The login flow is a typical OAuth2 authorization code flow. The flow
	// involves a user-agent (i.e. web browser) that can, but does not need to,
	// exist next to the command line.
	//
	// The browser-enabled flow is as follows:
	// 1. The initiator (e.g. spirlctl) opens a Login stream with the control
	// plane.
	//  2. The initiator sends a StartLoginRequest with the email address of the
	//     user and the local redirect URI it will use to receive the authorization
	//     code from the authorization server.
	//  3. The control-plane responds with a StartLoginResponse containing the URL
	//     that the initiator should direct the user to in order to login and/or
	//     authorize the control-plane to obtain an ID token from the authorization
	//     server on the user's behalf.
	//  4. The initiator opens a user-agent (i.e. browser) to that URL. The user
	//     completes the authorization. The authorization server redirects the
	//     browser back to the initiator. The authorization code is contained
	//     in the redirect URI.
	//  5. The initiator sends the FinishLoginRequest with the redirect URI
	//     containing the authorization code (and some other things opaque to
	//     the initiator).
	//  6. The control-plane exchanges the code with the authorization server
	//     for an ID token using it's OAuth2 client credentials.
	//  7. The control-plane mints a SPIRL auth token.
	//  8. The control-plane sends a FinishLoginResponse back to the initiator
	//     containing the SPIRL auth token.
	Login(grpc.BidiStreamingServer[LoginRequest, LoginResponse]) error
	// AuthenticateServiceAccount establishes a new session for the client using a
	// service account key. It is structured as a two-request, two-response
	// streaming RPC. To perform authentication, the client needs to prove
	// possession of an valid and enabled service account key.
	//
	// The first client request is a "ServiceAccountKeyLogin" request. It includes
	// the ID of the service account key the client targets. The service account
	// key id determines what key the client needs to be in possession of.
	//
	// The first server response contains a key proof-of-possession challenge
	// with a server-side nonce (Ns).
	//
	// The second client request is an "ServiceAccountKeyAuthorize" request. It
	// includes the key proof of the service account key key.
	//
	// The second server response contains the session information the
	// client can use for future authentication against the SPIRL cloud API.
	//
	// In summary, the flow is as follows:
	// 1. Client ----> (key_id) ---------> Server
	// 2. Client <---- (server_nonce) <--------------- Server
	// 3. Client ----> (key_proof) ---> Server
	// 3. Client <---- (session_info) <--------------- Server
	//
	// To form the key proof (KP), the client does the following:
	//  1. Generates its own client nonce (Nc)
	//  2. Computes the key proof hash (H), where:
	//     H = SHA512(Ns || Nc)
	//  3. Signs the key proof hash with the service account private key (Kr) to
	//     produce the key proof signature (S):
	//     S = Sign(H, Kr)
	//
	// The key proof is composed of the the tuple [S, Nc]:
	//
	//	KP = [S, Nc]
	//
	// To verify the key proof (KP), the server does the following:
	//  1. Looks up the service account public key (Ku)
	//  2. Computes the key proof hash (H) using the same algorithm as the client.
	//     The server is already in possession of the server nonce (Ns) and obtains
	//     the client nonce (Nc)from the "ServiceAccountKeyAuthorize" request.
	//  3. Verifies the signature S over H using the service account public key
	//
	// (Ku).
	AuthenticateServiceAccount(grpc.BidiStreamingServer[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse]) error
	// Verifies the identity token of the authenticated client and returns
	// identity information (user or service account) and other metadata.
	Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error)
	// Shows organizations that the current user or service accounts is part of
	ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error)
	// Logs out the authenticated entity, invalidating its auth session.
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) Login(grpc.BidiStreamingServer[LoginRequest, LoginResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAPIServer) AuthenticateServiceAccount(grpc.BidiStreamingServer[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AuthenticateServiceAccount not implemented")
}
func (UnimplementedAPIServer) Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedAPIServer) ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgs not implemented")
}
func (UnimplementedAPIServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_Login_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Login(&grpc.GenericServerStream[LoginRequest, LoginResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_LoginServer = grpc.BidiStreamingServer[LoginRequest, LoginResponse]

func _API_AuthenticateServiceAccount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).AuthenticateServiceAccount(&grpc.GenericServerStream[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_AuthenticateServiceAccountServer = grpc.BidiStreamingServer[AuthenticateServiceAccountRequest, AuthenticateServiceAccountResponse]

func _API_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Whoami_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListOrgs(ctx, req.(*ListOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.spirl.api.v1.session.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Whoami",
			Handler:    _API_Whoami_Handler,
		},
		{
			MethodName: "ListOrgs",
			Handler:    _API_ListOrgs_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _API_Logout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Login",
			Handler:       _API_Login_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthenticateServiceAccount",
			Handler:       _API_AuthenticateServiceAccount_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/sessionapi/api.proto",
}
