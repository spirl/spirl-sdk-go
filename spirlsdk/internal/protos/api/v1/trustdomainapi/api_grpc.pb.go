// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/trustdomainapi/api.proto

package trustdomainapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_CreateTrustDomain_FullMethodName           = "/com.spirl.api.v1.trustdomain.API/CreateTrustDomain"
	API_RegisterTrustDomain_FullMethodName         = "/com.spirl.api.v1.trustdomain.API/RegisterTrustDomain"
	API_ListTrustDomains_FullMethodName            = "/com.spirl.api.v1.trustdomain.API/ListTrustDomains"
	API_DeleteTrustDomain_FullMethodName           = "/com.spirl.api.v1.trustdomain.API/DeleteTrustDomain"
	API_TrustDomainInfo_FullMethodName             = "/com.spirl.api.v1.trustdomain.API/TrustDomainInfo"
	API_ListTrustDomainDeployments_FullMethodName  = "/com.spirl.api.v1.trustdomain.API/ListTrustDomainDeployments"
	API_DeleteTrustDomainDeployment_FullMethodName = "/com.spirl.api.v1.trustdomain.API/DeleteTrustDomainDeployment"
	API_ListTrustDomainKeys_FullMethodName         = "/com.spirl.api.v1.trustdomain.API/ListTrustDomainKeys"
	API_CreateTrustDomainKey_FullMethodName        = "/com.spirl.api.v1.trustdomain.API/CreateTrustDomainKey"
	API_DeleteTrustDomainKey_FullMethodName        = "/com.spirl.api.v1.trustdomain.API/DeleteTrustDomainKey"
	API_EnableTrustDomainKey_FullMethodName        = "/com.spirl.api.v1.trustdomain.API/EnableTrustDomainKey"
	API_DisableTrustDomainKey_FullMethodName       = "/com.spirl.api.v1.trustdomain.API/DisableTrustDomainKey"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Endpoint to create org's trust domain and associated data plane
	// infrastructure.
	CreateTrustDomain(ctx context.Context, in *CreateTrustDomainRequest, opts ...grpc.CallOption) (*CreateTrustDomainResponse, error)
	// Endpoint to create org's trust domain without data plane infrastructure.
	RegisterTrustDomain(ctx context.Context, in *RegisterTrustDomainRequest, opts ...grpc.CallOption) (*RegisterTrustDomainResponse, error)
	// Endpoint to list org's trust domains
	ListTrustDomains(ctx context.Context, in *ListTrustDomainsRequest, opts ...grpc.CallOption) (*ListTrustDomainsResponse, error)
	// Endpoint to delete a trust domain. Only a trust domain with no associated
	// infrastructure can be deleted.
	DeleteTrustDomain(ctx context.Context, in *DeleteTrustDomainRequest, opts ...grpc.CallOption) (*DeleteTrustDomainResponse, error)
	// Endpoint to get information about a trust domain.
	TrustDomainInfo(ctx context.Context, in *TrustDomainInfoRequest, opts ...grpc.CallOption) (*TrustDomainInfoResponse, error)
	// Endpoint to list a trust domain's deployments.
	ListTrustDomainDeployments(ctx context.Context, in *ListTrustDomainDeploymentsRequest, opts ...grpc.CallOption) (*ListTrustDomainDeploymentsResponse, error)
	// Endpoint to delete a trust domain's deployment.
	DeleteTrustDomainDeployment(ctx context.Context, in *DeleteTrustDomainDeploymentRequest, opts ...grpc.CallOption) (*DeleteTrustDomainDeploymentResponse, error)
	// Endpoint to list org's trust domain keys
	ListTrustDomainKeys(ctx context.Context, in *ListTrustDomainKeysRequest, opts ...grpc.CallOption) (*ListTrustDomainKeysResponse, error)
	// Endpoint to create a trust domain key.
	CreateTrustDomainKey(ctx context.Context, in *CreateTrustDomainKeyRequest, opts ...grpc.CallOption) (*CreateTrustDomainKeyResponse, error)
	// Endpoint to delete a trust domain key.
	// Unless force is specified only inactive keys can be deleted.
	DeleteTrustDomainKey(ctx context.Context, in *DeleteTrustDomainKeyRequest, opts ...grpc.CallOption) (*DeleteTrustDomainKeyResponse, error)
	// Endpoint to enable a trust domain key.
	EnableTrustDomainKey(ctx context.Context, in *EnableTrustDomainKeyRequest, opts ...grpc.CallOption) (*EnableTrustDomainKeyResponse, error)
	// Endpoint to disable a trust domain key.
	DisableTrustDomainKey(ctx context.Context, in *DisableTrustDomainKeyRequest, opts ...grpc.CallOption) (*DisableTrustDomainKeyResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateTrustDomain(ctx context.Context, in *CreateTrustDomainRequest, opts ...grpc.CallOption) (*CreateTrustDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrustDomainResponse)
	err := c.cc.Invoke(ctx, API_CreateTrustDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RegisterTrustDomain(ctx context.Context, in *RegisterTrustDomainRequest, opts ...grpc.CallOption) (*RegisterTrustDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTrustDomainResponse)
	err := c.cc.Invoke(ctx, API_RegisterTrustDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListTrustDomains(ctx context.Context, in *ListTrustDomainsRequest, opts ...grpc.CallOption) (*ListTrustDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrustDomainsResponse)
	err := c.cc.Invoke(ctx, API_ListTrustDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteTrustDomain(ctx context.Context, in *DeleteTrustDomainRequest, opts ...grpc.CallOption) (*DeleteTrustDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrustDomainResponse)
	err := c.cc.Invoke(ctx, API_DeleteTrustDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) TrustDomainInfo(ctx context.Context, in *TrustDomainInfoRequest, opts ...grpc.CallOption) (*TrustDomainInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrustDomainInfoResponse)
	err := c.cc.Invoke(ctx, API_TrustDomainInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListTrustDomainDeployments(ctx context.Context, in *ListTrustDomainDeploymentsRequest, opts ...grpc.CallOption) (*ListTrustDomainDeploymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrustDomainDeploymentsResponse)
	err := c.cc.Invoke(ctx, API_ListTrustDomainDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteTrustDomainDeployment(ctx context.Context, in *DeleteTrustDomainDeploymentRequest, opts ...grpc.CallOption) (*DeleteTrustDomainDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrustDomainDeploymentResponse)
	err := c.cc.Invoke(ctx, API_DeleteTrustDomainDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListTrustDomainKeys(ctx context.Context, in *ListTrustDomainKeysRequest, opts ...grpc.CallOption) (*ListTrustDomainKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrustDomainKeysResponse)
	err := c.cc.Invoke(ctx, API_ListTrustDomainKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateTrustDomainKey(ctx context.Context, in *CreateTrustDomainKeyRequest, opts ...grpc.CallOption) (*CreateTrustDomainKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrustDomainKeyResponse)
	err := c.cc.Invoke(ctx, API_CreateTrustDomainKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteTrustDomainKey(ctx context.Context, in *DeleteTrustDomainKeyRequest, opts ...grpc.CallOption) (*DeleteTrustDomainKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrustDomainKeyResponse)
	err := c.cc.Invoke(ctx, API_DeleteTrustDomainKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EnableTrustDomainKey(ctx context.Context, in *EnableTrustDomainKeyRequest, opts ...grpc.CallOption) (*EnableTrustDomainKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableTrustDomainKeyResponse)
	err := c.cc.Invoke(ctx, API_EnableTrustDomainKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DisableTrustDomainKey(ctx context.Context, in *DisableTrustDomainKeyRequest, opts ...grpc.CallOption) (*DisableTrustDomainKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableTrustDomainKeyResponse)
	err := c.cc.Invoke(ctx, API_DisableTrustDomainKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	// Endpoint to create org's trust domain and associated data plane
	// infrastructure.
	CreateTrustDomain(context.Context, *CreateTrustDomainRequest) (*CreateTrustDomainResponse, error)
	// Endpoint to create org's trust domain without data plane infrastructure.
	RegisterTrustDomain(context.Context, *RegisterTrustDomainRequest) (*RegisterTrustDomainResponse, error)
	// Endpoint to list org's trust domains
	ListTrustDomains(context.Context, *ListTrustDomainsRequest) (*ListTrustDomainsResponse, error)
	// Endpoint to delete a trust domain. Only a trust domain with no associated
	// infrastructure can be deleted.
	DeleteTrustDomain(context.Context, *DeleteTrustDomainRequest) (*DeleteTrustDomainResponse, error)
	// Endpoint to get information about a trust domain.
	TrustDomainInfo(context.Context, *TrustDomainInfoRequest) (*TrustDomainInfoResponse, error)
	// Endpoint to list a trust domain's deployments.
	ListTrustDomainDeployments(context.Context, *ListTrustDomainDeploymentsRequest) (*ListTrustDomainDeploymentsResponse, error)
	// Endpoint to delete a trust domain's deployment.
	DeleteTrustDomainDeployment(context.Context, *DeleteTrustDomainDeploymentRequest) (*DeleteTrustDomainDeploymentResponse, error)
	// Endpoint to list org's trust domain keys
	ListTrustDomainKeys(context.Context, *ListTrustDomainKeysRequest) (*ListTrustDomainKeysResponse, error)
	// Endpoint to create a trust domain key.
	CreateTrustDomainKey(context.Context, *CreateTrustDomainKeyRequest) (*CreateTrustDomainKeyResponse, error)
	// Endpoint to delete a trust domain key.
	// Unless force is specified only inactive keys can be deleted.
	DeleteTrustDomainKey(context.Context, *DeleteTrustDomainKeyRequest) (*DeleteTrustDomainKeyResponse, error)
	// Endpoint to enable a trust domain key.
	EnableTrustDomainKey(context.Context, *EnableTrustDomainKeyRequest) (*EnableTrustDomainKeyResponse, error)
	// Endpoint to disable a trust domain key.
	DisableTrustDomainKey(context.Context, *DisableTrustDomainKeyRequest) (*DisableTrustDomainKeyResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) CreateTrustDomain(context.Context, *CreateTrustDomainRequest) (*CreateTrustDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrustDomain not implemented")
}
func (UnimplementedAPIServer) RegisterTrustDomain(context.Context, *RegisterTrustDomainRequest) (*RegisterTrustDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTrustDomain not implemented")
}
func (UnimplementedAPIServer) ListTrustDomains(context.Context, *ListTrustDomainsRequest) (*ListTrustDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustDomains not implemented")
}
func (UnimplementedAPIServer) DeleteTrustDomain(context.Context, *DeleteTrustDomainRequest) (*DeleteTrustDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrustDomain not implemented")
}
func (UnimplementedAPIServer) TrustDomainInfo(context.Context, *TrustDomainInfoRequest) (*TrustDomainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrustDomainInfo not implemented")
}
func (UnimplementedAPIServer) ListTrustDomainDeployments(context.Context, *ListTrustDomainDeploymentsRequest) (*ListTrustDomainDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustDomainDeployments not implemented")
}
func (UnimplementedAPIServer) DeleteTrustDomainDeployment(context.Context, *DeleteTrustDomainDeploymentRequest) (*DeleteTrustDomainDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrustDomainDeployment not implemented")
}
func (UnimplementedAPIServer) ListTrustDomainKeys(context.Context, *ListTrustDomainKeysRequest) (*ListTrustDomainKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustDomainKeys not implemented")
}
func (UnimplementedAPIServer) CreateTrustDomainKey(context.Context, *CreateTrustDomainKeyRequest) (*CreateTrustDomainKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrustDomainKey not implemented")
}
func (UnimplementedAPIServer) DeleteTrustDomainKey(context.Context, *DeleteTrustDomainKeyRequest) (*DeleteTrustDomainKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrustDomainKey not implemented")
}
func (UnimplementedAPIServer) EnableTrustDomainKey(context.Context, *EnableTrustDomainKeyRequest) (*EnableTrustDomainKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTrustDomainKey not implemented")
}
func (UnimplementedAPIServer) DisableTrustDomainKey(context.Context, *DisableTrustDomainKeyRequest) (*DisableTrustDomainKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTrustDomainKey not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_CreateTrustDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateTrustDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateTrustDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateTrustDomain(ctx, req.(*CreateTrustDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RegisterTrustDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTrustDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RegisterTrustDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_RegisterTrustDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RegisterTrustDomain(ctx, req.(*RegisterTrustDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListTrustDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListTrustDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListTrustDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListTrustDomains(ctx, req.(*ListTrustDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteTrustDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrustDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteTrustDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteTrustDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteTrustDomain(ctx, req.(*DeleteTrustDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_TrustDomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustDomainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).TrustDomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_TrustDomainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).TrustDomainInfo(ctx, req.(*TrustDomainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListTrustDomainDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustDomainDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListTrustDomainDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListTrustDomainDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListTrustDomainDeployments(ctx, req.(*ListTrustDomainDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteTrustDomainDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrustDomainDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteTrustDomainDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteTrustDomainDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteTrustDomainDeployment(ctx, req.(*DeleteTrustDomainDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListTrustDomainKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustDomainKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListTrustDomainKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListTrustDomainKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListTrustDomainKeys(ctx, req.(*ListTrustDomainKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateTrustDomainKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustDomainKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateTrustDomainKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateTrustDomainKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateTrustDomainKey(ctx, req.(*CreateTrustDomainKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteTrustDomainKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrustDomainKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteTrustDomainKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteTrustDomainKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteTrustDomainKey(ctx, req.(*DeleteTrustDomainKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EnableTrustDomainKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTrustDomainKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EnableTrustDomainKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_EnableTrustDomainKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EnableTrustDomainKey(ctx, req.(*EnableTrustDomainKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DisableTrustDomainKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTrustDomainKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DisableTrustDomainKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DisableTrustDomainKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DisableTrustDomainKey(ctx, req.(*DisableTrustDomainKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.spirl.api.v1.trustdomain.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrustDomain",
			Handler:    _API_CreateTrustDomain_Handler,
		},
		{
			MethodName: "RegisterTrustDomain",
			Handler:    _API_RegisterTrustDomain_Handler,
		},
		{
			MethodName: "ListTrustDomains",
			Handler:    _API_ListTrustDomains_Handler,
		},
		{
			MethodName: "DeleteTrustDomain",
			Handler:    _API_DeleteTrustDomain_Handler,
		},
		{
			MethodName: "TrustDomainInfo",
			Handler:    _API_TrustDomainInfo_Handler,
		},
		{
			MethodName: "ListTrustDomainDeployments",
			Handler:    _API_ListTrustDomainDeployments_Handler,
		},
		{
			MethodName: "DeleteTrustDomainDeployment",
			Handler:    _API_DeleteTrustDomainDeployment_Handler,
		},
		{
			MethodName: "ListTrustDomainKeys",
			Handler:    _API_ListTrustDomainKeys_Handler,
		},
		{
			MethodName: "CreateTrustDomainKey",
			Handler:    _API_CreateTrustDomainKey_Handler,
		},
		{
			MethodName: "DeleteTrustDomainKey",
			Handler:    _API_DeleteTrustDomainKey_Handler,
		},
		{
			MethodName: "EnableTrustDomainKey",
			Handler:    _API_EnableTrustDomainKey_Handler,
		},
		{
			MethodName: "DisableTrustDomainKey",
			Handler:    _API_DisableTrustDomainKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/trustdomainapi/api.proto",
}
