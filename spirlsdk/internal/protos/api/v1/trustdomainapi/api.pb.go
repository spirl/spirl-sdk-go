// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/v1/trustdomainapi/api.proto

package trustdomainapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrustDomainDeployment_ConfigurationState int32

const (
	// CONFIGURATION_STATE_UNKNOWN is the default ConfigurationState and should
	// not be used.
	TrustDomainDeployment_CONFIGURATION_STATE_UNKNOWN TrustDomainDeployment_ConfigurationState = 0
	// CONFIGURATION_STATE_UP_TO_DATE communicates that the TDD has been
	// communicating frequently with the CP.
	//
	// The exact cut-off for this is determined by the CP.
	TrustDomainDeployment_CONFIGURATION_STATE_UP_TO_DATE TrustDomainDeployment_ConfigurationState = 1
	// CONFIGURATION_STATE_STALE communicates that the TDD has fallen
	// behind in communicating with the CP.
	//
	// The exact cut-off for this is determined by the CP.
	TrustDomainDeployment_CONFIGURATION_STATE_STALE TrustDomainDeployment_ConfigurationState = 2
)

// Enum value maps for TrustDomainDeployment_ConfigurationState.
var (
	TrustDomainDeployment_ConfigurationState_name = map[int32]string{
		0: "CONFIGURATION_STATE_UNKNOWN",
		1: "CONFIGURATION_STATE_UP_TO_DATE",
		2: "CONFIGURATION_STATE_STALE",
	}
	TrustDomainDeployment_ConfigurationState_value = map[string]int32{
		"CONFIGURATION_STATE_UNKNOWN":    0,
		"CONFIGURATION_STATE_UP_TO_DATE": 1,
		"CONFIGURATION_STATE_STALE":      2,
	}
)

func (x TrustDomainDeployment_ConfigurationState) Enum() *TrustDomainDeployment_ConfigurationState {
	p := new(TrustDomainDeployment_ConfigurationState)
	*p = x
	return p
}

func (x TrustDomainDeployment_ConfigurationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrustDomainDeployment_ConfigurationState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_trustdomainapi_api_proto_enumTypes[0].Descriptor()
}

func (TrustDomainDeployment_ConfigurationState) Type() protoreflect.EnumType {
	return &file_api_v1_trustdomainapi_api_proto_enumTypes[0]
}

func (x TrustDomainDeployment_ConfigurationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrustDomainDeployment_ConfigurationState.Descriptor instead.
func (TrustDomainDeployment_ConfigurationState) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{13, 0}
}

type CreateTrustDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the trust domain.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A description of the trust domain.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateTrustDomainRequest) Reset() {
	*x = CreateTrustDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrustDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrustDomainRequest) ProtoMessage() {}

func (x *CreateTrustDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrustDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateTrustDomainRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTrustDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTrustDomainRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateTrustDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Typically ${trust_domain}.${org_name}.spirl.app, but may vary by
	// environment
	EndpointUrl string `protobuf:"bytes,1,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"` // TODO: better name here
}

func (x *CreateTrustDomainResponse) Reset() {
	*x = CreateTrustDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrustDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrustDomainResponse) ProtoMessage() {}

func (x *CreateTrustDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrustDomainResponse.ProtoReflect.Descriptor instead.
func (*CreateTrustDomainResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTrustDomainResponse) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *CreateTrustDomainResponse) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

type RegisterTrustDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the trust domain.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A description of the trust domain.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RegisterTrustDomainRequest) Reset() {
	*x = RegisterTrustDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTrustDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTrustDomainRequest) ProtoMessage() {}

func (x *RegisterTrustDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTrustDomainRequest.ProtoReflect.Descriptor instead.
func (*RegisterTrustDomainRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterTrustDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterTrustDomainRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RegisterTrustDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *RegisterTrustDomainResponse) Reset() {
	*x = RegisterTrustDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTrustDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTrustDomainResponse) ProtoMessage() {}

func (x *RegisterTrustDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTrustDomainResponse.ProtoReflect.Descriptor instead.
func (*RegisterTrustDomainResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterTrustDomainResponse) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type ListTrustDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The name of the trust domain to list.
	TrustDomainName string `protobuf:"bytes,1,opt,name=trust_domain_name,json=trustDomainName,proto3" json:"trust_domain_name,omitempty"`
	// If set to true, will call tdservers to fetch dynamic td status (cluster
	// and federation link counts).
	IncludeDynamicData bool `protobuf:"varint,2,opt,name=include_dynamic_data,json=includeDynamicData,proto3" json:"include_dynamic_data,omitempty"`
}

func (x *ListTrustDomainsRequest) Reset() {
	*x = ListTrustDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrustDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrustDomainsRequest) ProtoMessage() {}

func (x *ListTrustDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrustDomainsRequest.ProtoReflect.Descriptor instead.
func (*ListTrustDomainsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListTrustDomainsRequest) GetTrustDomainName() string {
	if x != nil {
		return x.TrustDomainName
	}
	return ""
}

func (x *ListTrustDomainsRequest) GetIncludeDynamicData() bool {
	if x != nil {
		return x.IncludeDynamicData
	}
	return false
}

type ListTrustDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomains []*TrustDomain `protobuf:"bytes,1,rep,name=trust_domains,json=trustDomains,proto3" json:"trust_domains,omitempty"`
}

func (x *ListTrustDomainsResponse) Reset() {
	*x = ListTrustDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrustDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrustDomainsResponse) ProtoMessage() {}

func (x *ListTrustDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrustDomainsResponse.ProtoReflect.Descriptor instead.
func (*ListTrustDomainsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListTrustDomainsResponse) GetTrustDomains() []*TrustDomain {
	if x != nil {
		return x.TrustDomains
	}
	return nil
}

type DeleteTrustDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *DeleteTrustDomainRequest) Reset() {
	*x = DeleteTrustDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrustDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrustDomainRequest) ProtoMessage() {}

func (x *DeleteTrustDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrustDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteTrustDomainRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTrustDomainRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type DeleteTrustDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTrustDomainResponse) Reset() {
	*x = DeleteTrustDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrustDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrustDomainResponse) ProtoMessage() {}

func (x *DeleteTrustDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrustDomainResponse.ProtoReflect.Descriptor instead.
func (*DeleteTrustDomainResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{7}
}

type TrustDomainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *TrustDomainInfoRequest) Reset() {
	*x = TrustDomainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustDomainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustDomainInfoRequest) ProtoMessage() {}

func (x *TrustDomainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustDomainInfoRequest.ProtoReflect.Descriptor instead.
func (*TrustDomainInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{8}
}

func (x *TrustDomainInfoRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type TrustDomainInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                 `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description              string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	State                    string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	SpirlAgentEndpointUrl    string                 `protobuf:"bytes,3,opt,name=spirl_agent_endpoint_url,json=spirlAgentEndpointUrl,proto3" json:"spirl_agent_endpoint_url,omitempty"`
	JwtIssuerEndpointUrl     string                 `protobuf:"bytes,4,opt,name=jwt_issuer_endpoint_url,json=jwtIssuerEndpointUrl,proto3" json:"jwt_issuer_endpoint_url,omitempty"`
	SpiffeBundleEndpointUrl  string                 `protobuf:"bytes,5,opt,name=spiffe_bundle_endpoint_url,json=spiffeBundleEndpointUrl,proto3" json:"spiffe_bundle_endpoint_url,omitempty"`
	JwksEndpointUrl          string                 `protobuf:"bytes,6,opt,name=jwks_endpoint_url,json=jwksEndpointUrl,proto3" json:"jwks_endpoint_url,omitempty"`
	OidcDiscoveryEndpointUrl string                 `protobuf:"bytes,7,opt,name=oidc_discovery_endpoint_url,json=oidcDiscoveryEndpointUrl,proto3" json:"oidc_discovery_endpoint_url,omitempty"`
	IsSelfManaged            bool                   `protobuf:"varint,9,opt,name=is_self_managed,json=isSelfManaged,proto3" json:"is_self_managed,omitempty"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TrustDomainInfoResponse) Reset() {
	*x = TrustDomainInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustDomainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustDomainInfoResponse) ProtoMessage() {}

func (x *TrustDomainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustDomainInfoResponse.ProtoReflect.Descriptor instead.
func (*TrustDomainInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{9}
}

func (x *TrustDomainInfoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetSpirlAgentEndpointUrl() string {
	if x != nil {
		return x.SpirlAgentEndpointUrl
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetJwtIssuerEndpointUrl() string {
	if x != nil {
		return x.JwtIssuerEndpointUrl
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetSpiffeBundleEndpointUrl() string {
	if x != nil {
		return x.SpiffeBundleEndpointUrl
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetJwksEndpointUrl() string {
	if x != nil {
		return x.JwksEndpointUrl
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetOidcDiscoveryEndpointUrl() string {
	if x != nil {
		return x.OidcDiscoveryEndpointUrl
	}
	return ""
}

func (x *TrustDomainInfoResponse) GetIsSelfManaged() bool {
	if x != nil {
		return x.IsSelfManaged
	}
	return false
}

func (x *TrustDomainInfoResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TrustDomainInfoResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TrustDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description              string                 `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	State                    string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	EndpointUrl              string                 `protobuf:"bytes,3,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"` // agent endpoint URL.
	JwtIssuerEndpointUrl     string                 `protobuf:"bytes,6,opt,name=jwt_issuer_endpoint_url,json=jwtIssuerEndpointUrl,proto3" json:"jwt_issuer_endpoint_url,omitempty"`
	SpiffeBundleEndpointUrl  string                 `protobuf:"bytes,7,opt,name=spiffe_bundle_endpoint_url,json=spiffeBundleEndpointUrl,proto3" json:"spiffe_bundle_endpoint_url,omitempty"`
	JwksEndpointUrl          string                 `protobuf:"bytes,8,opt,name=jwks_endpoint_url,json=jwksEndpointUrl,proto3" json:"jwks_endpoint_url,omitempty"`
	OidcDiscoveryEndpointUrl string                 `protobuf:"bytes,9,opt,name=oidc_discovery_endpoint_url,json=oidcDiscoveryEndpointUrl,proto3" json:"oidc_discovery_endpoint_url,omitempty"`
	IsSelfManaged            bool                   `protobuf:"varint,5,opt,name=is_self_managed,json=isSelfManaged,proto3" json:"is_self_managed,omitempty"`
	// Dynamic td status data
	ClustersTotal         int64 `protobuf:"varint,10,opt,name=clusters_total,json=clustersTotal,proto3" json:"clusters_total,omitempty"`
	ClustersActive        int64 `protobuf:"varint,11,opt,name=clusters_active,json=clustersActive,proto3" json:"clusters_active,omitempty"`
	FederationLinksActive int64 `protobuf:"varint,13,opt,name=federation_links_active,json=federationLinksActive,proto3" json:"federation_links_active,omitempty"`
	FederationLinksTotal  int64 `protobuf:"varint,12,opt,name=federation_links_total,json=federationLinksTotal,proto3" json:"federation_links_total,omitempty"`
}

func (x *TrustDomain) Reset() {
	*x = TrustDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustDomain) ProtoMessage() {}

func (x *TrustDomain) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustDomain.ProtoReflect.Descriptor instead.
func (*TrustDomain) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{10}
}

func (x *TrustDomain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrustDomain) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TrustDomain) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TrustDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrustDomain) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TrustDomain) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TrustDomain) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *TrustDomain) GetJwtIssuerEndpointUrl() string {
	if x != nil {
		return x.JwtIssuerEndpointUrl
	}
	return ""
}

func (x *TrustDomain) GetSpiffeBundleEndpointUrl() string {
	if x != nil {
		return x.SpiffeBundleEndpointUrl
	}
	return ""
}

func (x *TrustDomain) GetJwksEndpointUrl() string {
	if x != nil {
		return x.JwksEndpointUrl
	}
	return ""
}

func (x *TrustDomain) GetOidcDiscoveryEndpointUrl() string {
	if x != nil {
		return x.OidcDiscoveryEndpointUrl
	}
	return ""
}

func (x *TrustDomain) GetIsSelfManaged() bool {
	if x != nil {
		return x.IsSelfManaged
	}
	return false
}

func (x *TrustDomain) GetClustersTotal() int64 {
	if x != nil {
		return x.ClustersTotal
	}
	return 0
}

func (x *TrustDomain) GetClustersActive() int64 {
	if x != nil {
		return x.ClustersActive
	}
	return 0
}

func (x *TrustDomain) GetFederationLinksActive() int64 {
	if x != nil {
		return x.FederationLinksActive
	}
	return 0
}

func (x *TrustDomain) GetFederationLinksTotal() int64 {
	if x != nil {
		return x.FederationLinksTotal
	}
	return 0
}

type TrustDomainKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrustDomainId  string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	DeploymentName string `protobuf:"bytes,5,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	State          string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Types that are assignable to Pubkey:
	//
	//	*TrustDomainKey_PkixPubkey
	Pubkey isTrustDomainKey_Pubkey `protobuf_oneof:"pubkey"`
}

func (x *TrustDomainKey) Reset() {
	*x = TrustDomainKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustDomainKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustDomainKey) ProtoMessage() {}

func (x *TrustDomainKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustDomainKey.ProtoReflect.Descriptor instead.
func (*TrustDomainKey) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{11}
}

func (x *TrustDomainKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrustDomainKey) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *TrustDomainKey) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *TrustDomainKey) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (m *TrustDomainKey) GetPubkey() isTrustDomainKey_Pubkey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (x *TrustDomainKey) GetPkixPubkey() *PKIXPublicKey {
	if x, ok := x.GetPubkey().(*TrustDomainKey_PkixPubkey); ok {
		return x.PkixPubkey
	}
	return nil
}

type isTrustDomainKey_Pubkey interface {
	isTrustDomainKey_Pubkey()
}

type TrustDomainKey_PkixPubkey struct {
	PkixPubkey *PKIXPublicKey `protobuf:"bytes,4,opt,name=pkix_pubkey,json=pkixPubkey,proto3,oneof"`
}

func (*TrustDomainKey_PkixPubkey) isTrustDomainKey_Pubkey() {}

type ListTrustDomainDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Filters deployment by trust domain id.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *ListTrustDomainDeploymentsRequest) Reset() {
	*x = ListTrustDomainDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrustDomainDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrustDomainDeploymentsRequest) ProtoMessage() {}

func (x *ListTrustDomainDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrustDomainDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListTrustDomainDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{12}
}

func (x *ListTrustDomainDeploymentsRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type TrustDomainDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrustDomainId      string                                   `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	OrgId              string                                   `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DeploymentName     string                                   `protobuf:"bytes,4,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	LastAtIntent       *timestamppb.Timestamp                   `protobuf:"bytes,5,opt,name=last_at_intent,json=lastAtIntent,proto3" json:"last_at_intent,omitempty"`
	ConfigurationState TrustDomainDeployment_ConfigurationState `protobuf:"varint,6,opt,name=configuration_state,json=configurationState,proto3,enum=com.spirl.api.v1.trustdomain.TrustDomainDeployment_ConfigurationState" json:"configuration_state,omitempty"`
}

func (x *TrustDomainDeployment) Reset() {
	*x = TrustDomainDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustDomainDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustDomainDeployment) ProtoMessage() {}

func (x *TrustDomainDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustDomainDeployment.ProtoReflect.Descriptor instead.
func (*TrustDomainDeployment) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{13}
}

func (x *TrustDomainDeployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrustDomainDeployment) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *TrustDomainDeployment) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TrustDomainDeployment) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *TrustDomainDeployment) GetLastAtIntent() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAtIntent
	}
	return nil
}

func (x *TrustDomainDeployment) GetConfigurationState() TrustDomainDeployment_ConfigurationState {
	if x != nil {
		return x.ConfigurationState
	}
	return TrustDomainDeployment_CONFIGURATION_STATE_UNKNOWN
}

type ListTrustDomainDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainDeployments []*TrustDomainDeployment `protobuf:"bytes,1,rep,name=trust_domain_deployments,json=trustDomainDeployments,proto3" json:"trust_domain_deployments,omitempty"`
}

func (x *ListTrustDomainDeploymentsResponse) Reset() {
	*x = ListTrustDomainDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrustDomainDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrustDomainDeploymentsResponse) ProtoMessage() {}

func (x *ListTrustDomainDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrustDomainDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListTrustDomainDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListTrustDomainDeploymentsResponse) GetTrustDomainDeployments() []*TrustDomainDeployment {
	if x != nil {
		return x.TrustDomainDeployments
	}
	return nil
}

type DeleteTrustDomainDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the deployment.
	DeploymentName string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// Required. The id of the trust domain
	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Optional. If force is set the deployment is deleted regardless of any active keys.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteTrustDomainDeploymentRequest) Reset() {
	*x = DeleteTrustDomainDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrustDomainDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrustDomainDeploymentRequest) ProtoMessage() {}

func (x *DeleteTrustDomainDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrustDomainDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeleteTrustDomainDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteTrustDomainDeploymentRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *DeleteTrustDomainDeploymentRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *DeleteTrustDomainDeploymentRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteTrustDomainDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTrustDomainDeploymentResponse) Reset() {
	*x = DeleteTrustDomainDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrustDomainDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrustDomainDeploymentResponse) ProtoMessage() {}

func (x *DeleteTrustDomainDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrustDomainDeploymentResponse.ProtoReflect.Descriptor instead.
func (*DeleteTrustDomainDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{16}
}

type ListTrustDomainKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Filter keys by trust domain id.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Optional. Filter keys by deployment name.
	DeploymentName string `protobuf:"bytes,2,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
}

func (x *ListTrustDomainKeysRequest) Reset() {
	*x = ListTrustDomainKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrustDomainKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrustDomainKeysRequest) ProtoMessage() {}

func (x *ListTrustDomainKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrustDomainKeysRequest.ProtoReflect.Descriptor instead.
func (*ListTrustDomainKeysRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListTrustDomainKeysRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *ListTrustDomainKeysRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

type ListTrustDomainKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainKeys []*TrustDomainKey `protobuf:"bytes,1,rep,name=trust_domain_keys,json=trustDomainKeys,proto3" json:"trust_domain_keys,omitempty"`
}

func (x *ListTrustDomainKeysResponse) Reset() {
	*x = ListTrustDomainKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrustDomainKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrustDomainKeysResponse) ProtoMessage() {}

func (x *ListTrustDomainKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrustDomainKeysResponse.ProtoReflect.Descriptor instead.
func (*ListTrustDomainKeysResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListTrustDomainKeysResponse) GetTrustDomainKeys() []*TrustDomainKey {
	if x != nil {
		return x.TrustDomainKeys
	}
	return nil
}

type CreateTrustDomainKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Required. The deployment_name of the key. It's OK for two keys to have the
	// same name.  That usually means a rotation happened for that key.
	DeploymentName string `protobuf:"bytes,2,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// Required. The public key for trtl agents on the trust domain server. Only
	// Ed25519 keys are supported.
	//
	// Types that are assignable to Pubkey:
	//
	//	*CreateTrustDomainKeyRequest_PkixPubkey
	Pubkey isCreateTrustDomainKeyRequest_Pubkey `protobuf_oneof:"pubkey"`
}

func (x *CreateTrustDomainKeyRequest) Reset() {
	*x = CreateTrustDomainKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrustDomainKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrustDomainKeyRequest) ProtoMessage() {}

func (x *CreateTrustDomainKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrustDomainKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateTrustDomainKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTrustDomainKeyRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *CreateTrustDomainKeyRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (m *CreateTrustDomainKeyRequest) GetPubkey() isCreateTrustDomainKeyRequest_Pubkey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (x *CreateTrustDomainKeyRequest) GetPkixPubkey() *PKIXPublicKey {
	if x, ok := x.GetPubkey().(*CreateTrustDomainKeyRequest_PkixPubkey); ok {
		return x.PkixPubkey
	}
	return nil
}

type isCreateTrustDomainKeyRequest_Pubkey interface {
	isCreateTrustDomainKeyRequest_Pubkey()
}

type CreateTrustDomainKeyRequest_PkixPubkey struct {
	PkixPubkey *PKIXPublicKey `protobuf:"bytes,3,opt,name=pkix_pubkey,json=pkixPubkey,proto3,oneof"`
}

func (*CreateTrustDomainKeyRequest_PkixPubkey) isCreateTrustDomainKeyRequest_Pubkey() {}

type CreateTrustDomainKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTrustDomainKeyResponse) Reset() {
	*x = CreateTrustDomainKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrustDomainKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrustDomainKeyResponse) ProtoMessage() {}

func (x *CreateTrustDomainKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrustDomainKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateTrustDomainKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTrustDomainKeyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTrustDomainKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the trust domain.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Required. The id of the key to delete.
	TrustDomainKeyId string `protobuf:"bytes,2,opt,name=trust_domain_key_id,json=trustDomainKeyId,proto3" json:"trust_domain_key_id,omitempty"`
	// Optional. If force is set the key is deleted regardless of its state.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteTrustDomainKeyRequest) Reset() {
	*x = DeleteTrustDomainKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrustDomainKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrustDomainKeyRequest) ProtoMessage() {}

func (x *DeleteTrustDomainKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrustDomainKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteTrustDomainKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteTrustDomainKeyRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *DeleteTrustDomainKeyRequest) GetTrustDomainKeyId() string {
	if x != nil {
		return x.TrustDomainKeyId
	}
	return ""
}

func (x *DeleteTrustDomainKeyRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteTrustDomainKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTrustDomainKeyResponse) Reset() {
	*x = DeleteTrustDomainKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrustDomainKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrustDomainKeyResponse) ProtoMessage() {}

func (x *DeleteTrustDomainKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrustDomainKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteTrustDomainKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{22}
}

type EnableTrustDomainKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the trust domain.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Required. The id of the key to enable.
	TrustDomainKeyId string `protobuf:"bytes,2,opt,name=trust_domain_key_id,json=trustDomainKeyId,proto3" json:"trust_domain_key_id,omitempty"`
}

func (x *EnableTrustDomainKeyRequest) Reset() {
	*x = EnableTrustDomainKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTrustDomainKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTrustDomainKeyRequest) ProtoMessage() {}

func (x *EnableTrustDomainKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTrustDomainKeyRequest.ProtoReflect.Descriptor instead.
func (*EnableTrustDomainKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{23}
}

func (x *EnableTrustDomainKeyRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *EnableTrustDomainKeyRequest) GetTrustDomainKeyId() string {
	if x != nil {
		return x.TrustDomainKeyId
	}
	return ""
}

type EnableTrustDomainKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableTrustDomainKeyResponse) Reset() {
	*x = EnableTrustDomainKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTrustDomainKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTrustDomainKeyResponse) ProtoMessage() {}

func (x *EnableTrustDomainKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTrustDomainKeyResponse.ProtoReflect.Descriptor instead.
func (*EnableTrustDomainKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{24}
}

type DisableTrustDomainKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the trust domain.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Required. The id of the key to disable.
	TrustDomainKeyId string `protobuf:"bytes,2,opt,name=trust_domain_key_id,json=trustDomainKeyId,proto3" json:"trust_domain_key_id,omitempty"`
}

func (x *DisableTrustDomainKeyRequest) Reset() {
	*x = DisableTrustDomainKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTrustDomainKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTrustDomainKeyRequest) ProtoMessage() {}

func (x *DisableTrustDomainKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTrustDomainKeyRequest.ProtoReflect.Descriptor instead.
func (*DisableTrustDomainKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{25}
}

func (x *DisableTrustDomainKeyRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *DisableTrustDomainKeyRequest) GetTrustDomainKeyId() string {
	if x != nil {
		return x.TrustDomainKeyId
	}
	return ""
}

type DisableTrustDomainKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableTrustDomainKeyResponse) Reset() {
	*x = DisableTrustDomainKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTrustDomainKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTrustDomainKeyResponse) ProtoMessage() {}

func (x *DisableTrustDomainKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTrustDomainKeyResponse.ProtoReflect.Descriptor instead.
func (*DisableTrustDomainKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{26}
}

// Represents a public key in PKIX, ASN.1 DER form.
type PKIXPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PKIXPublicKey) Reset() {
	*x = PKIXPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKIXPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKIXPublicKey) ProtoMessage() {}

func (x *PKIXPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_trustdomainapi_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKIXPublicKey.ProtoReflect.Descriptor instead.
func (*PKIXPublicKey) Descriptor() ([]byte, []int) {
	return file_api_v1_trustdomainapi_api_proto_rawDescGZIP(), []int{27}
}

func (x *PKIXPublicKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_v1_trustdomainapi_api_proto protoreflect.FileDescriptor

var file_api_v1_trustdomainapi_api_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x50, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x58, 0x0a, 0x1a, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0x45, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x22, 0x48, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0xab, 0x04, 0x0a, 0x17, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x35, 0x0a, 0x17, 0x6a, 0x77, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6a, 0x77, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x70, 0x69,
	0x66, 0x66, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6a, 0x77, 0x6b, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6f, 0x69, 0x64, 0x63, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc7, 0x05,
	0x0a, 0x0b, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6a, 0x77, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6a, 0x77, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x70, 0x69,
	0x66, 0x66, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6a, 0x77, 0x6b, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6f, 0x69, 0x64, 0x63, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x65,
	0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x6b, 0x69, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x4b, 0x49, 0x58, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6b, 0x69, 0x78, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xc4, 0x03, 0x0a, 0x15, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x22,
	0x93, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x6b, 0x69, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x4b, 0x49, 0x58, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6b, 0x69, 0x78, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x2e, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x1b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0x1e, 0x0a, 0x1c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x75, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x50, 0x4b, 0x49, 0x58,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xbb, 0x0d,
	0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2f,
	0x73, 0x70, 0x69, 0x72, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_trustdomainapi_api_proto_rawDescOnce sync.Once
	file_api_v1_trustdomainapi_api_proto_rawDescData = file_api_v1_trustdomainapi_api_proto_rawDesc
)

func file_api_v1_trustdomainapi_api_proto_rawDescGZIP() []byte {
	file_api_v1_trustdomainapi_api_proto_rawDescOnce.Do(func() {
		file_api_v1_trustdomainapi_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_trustdomainapi_api_proto_rawDescData)
	})
	return file_api_v1_trustdomainapi_api_proto_rawDescData
}

var file_api_v1_trustdomainapi_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_trustdomainapi_api_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_api_v1_trustdomainapi_api_proto_goTypes = []any{
	(TrustDomainDeployment_ConfigurationState)(0), // 0: com.spirl.api.v1.trustdomain.TrustDomainDeployment.ConfigurationState
	(*CreateTrustDomainRequest)(nil),              // 1: com.spirl.api.v1.trustdomain.CreateTrustDomainRequest
	(*CreateTrustDomainResponse)(nil),             // 2: com.spirl.api.v1.trustdomain.CreateTrustDomainResponse
	(*RegisterTrustDomainRequest)(nil),            // 3: com.spirl.api.v1.trustdomain.RegisterTrustDomainRequest
	(*RegisterTrustDomainResponse)(nil),           // 4: com.spirl.api.v1.trustdomain.RegisterTrustDomainResponse
	(*ListTrustDomainsRequest)(nil),               // 5: com.spirl.api.v1.trustdomain.ListTrustDomainsRequest
	(*ListTrustDomainsResponse)(nil),              // 6: com.spirl.api.v1.trustdomain.ListTrustDomainsResponse
	(*DeleteTrustDomainRequest)(nil),              // 7: com.spirl.api.v1.trustdomain.DeleteTrustDomainRequest
	(*DeleteTrustDomainResponse)(nil),             // 8: com.spirl.api.v1.trustdomain.DeleteTrustDomainResponse
	(*TrustDomainInfoRequest)(nil),                // 9: com.spirl.api.v1.trustdomain.TrustDomainInfoRequest
	(*TrustDomainInfoResponse)(nil),               // 10: com.spirl.api.v1.trustdomain.TrustDomainInfoResponse
	(*TrustDomain)(nil),                           // 11: com.spirl.api.v1.trustdomain.TrustDomain
	(*TrustDomainKey)(nil),                        // 12: com.spirl.api.v1.trustdomain.TrustDomainKey
	(*ListTrustDomainDeploymentsRequest)(nil),     // 13: com.spirl.api.v1.trustdomain.ListTrustDomainDeploymentsRequest
	(*TrustDomainDeployment)(nil),                 // 14: com.spirl.api.v1.trustdomain.TrustDomainDeployment
	(*ListTrustDomainDeploymentsResponse)(nil),    // 15: com.spirl.api.v1.trustdomain.ListTrustDomainDeploymentsResponse
	(*DeleteTrustDomainDeploymentRequest)(nil),    // 16: com.spirl.api.v1.trustdomain.DeleteTrustDomainDeploymentRequest
	(*DeleteTrustDomainDeploymentResponse)(nil),   // 17: com.spirl.api.v1.trustdomain.DeleteTrustDomainDeploymentResponse
	(*ListTrustDomainKeysRequest)(nil),            // 18: com.spirl.api.v1.trustdomain.ListTrustDomainKeysRequest
	(*ListTrustDomainKeysResponse)(nil),           // 19: com.spirl.api.v1.trustdomain.ListTrustDomainKeysResponse
	(*CreateTrustDomainKeyRequest)(nil),           // 20: com.spirl.api.v1.trustdomain.CreateTrustDomainKeyRequest
	(*CreateTrustDomainKeyResponse)(nil),          // 21: com.spirl.api.v1.trustdomain.CreateTrustDomainKeyResponse
	(*DeleteTrustDomainKeyRequest)(nil),           // 22: com.spirl.api.v1.trustdomain.DeleteTrustDomainKeyRequest
	(*DeleteTrustDomainKeyResponse)(nil),          // 23: com.spirl.api.v1.trustdomain.DeleteTrustDomainKeyResponse
	(*EnableTrustDomainKeyRequest)(nil),           // 24: com.spirl.api.v1.trustdomain.EnableTrustDomainKeyRequest
	(*EnableTrustDomainKeyResponse)(nil),          // 25: com.spirl.api.v1.trustdomain.EnableTrustDomainKeyResponse
	(*DisableTrustDomainKeyRequest)(nil),          // 26: com.spirl.api.v1.trustdomain.DisableTrustDomainKeyRequest
	(*DisableTrustDomainKeyResponse)(nil),         // 27: com.spirl.api.v1.trustdomain.DisableTrustDomainKeyResponse
	(*PKIXPublicKey)(nil),                         // 28: com.spirl.api.v1.trustdomain.PKIXPublicKey
	(*timestamppb.Timestamp)(nil),                 // 29: google.protobuf.Timestamp
}
var file_api_v1_trustdomainapi_api_proto_depIdxs = []int32{
	11, // 0: com.spirl.api.v1.trustdomain.ListTrustDomainsResponse.trust_domains:type_name -> com.spirl.api.v1.trustdomain.TrustDomain
	29, // 1: com.spirl.api.v1.trustdomain.TrustDomainInfoResponse.created_at:type_name -> google.protobuf.Timestamp
	29, // 2: com.spirl.api.v1.trustdomain.TrustDomainInfoResponse.updated_at:type_name -> google.protobuf.Timestamp
	29, // 3: com.spirl.api.v1.trustdomain.TrustDomain.created_at:type_name -> google.protobuf.Timestamp
	29, // 4: com.spirl.api.v1.trustdomain.TrustDomain.updated_at:type_name -> google.protobuf.Timestamp
	28, // 5: com.spirl.api.v1.trustdomain.TrustDomainKey.pkix_pubkey:type_name -> com.spirl.api.v1.trustdomain.PKIXPublicKey
	29, // 6: com.spirl.api.v1.trustdomain.TrustDomainDeployment.last_at_intent:type_name -> google.protobuf.Timestamp
	0,  // 7: com.spirl.api.v1.trustdomain.TrustDomainDeployment.configuration_state:type_name -> com.spirl.api.v1.trustdomain.TrustDomainDeployment.ConfigurationState
	14, // 8: com.spirl.api.v1.trustdomain.ListTrustDomainDeploymentsResponse.trust_domain_deployments:type_name -> com.spirl.api.v1.trustdomain.TrustDomainDeployment
	12, // 9: com.spirl.api.v1.trustdomain.ListTrustDomainKeysResponse.trust_domain_keys:type_name -> com.spirl.api.v1.trustdomain.TrustDomainKey
	28, // 10: com.spirl.api.v1.trustdomain.CreateTrustDomainKeyRequest.pkix_pubkey:type_name -> com.spirl.api.v1.trustdomain.PKIXPublicKey
	1,  // 11: com.spirl.api.v1.trustdomain.API.CreateTrustDomain:input_type -> com.spirl.api.v1.trustdomain.CreateTrustDomainRequest
	3,  // 12: com.spirl.api.v1.trustdomain.API.RegisterTrustDomain:input_type -> com.spirl.api.v1.trustdomain.RegisterTrustDomainRequest
	5,  // 13: com.spirl.api.v1.trustdomain.API.ListTrustDomains:input_type -> com.spirl.api.v1.trustdomain.ListTrustDomainsRequest
	7,  // 14: com.spirl.api.v1.trustdomain.API.DeleteTrustDomain:input_type -> com.spirl.api.v1.trustdomain.DeleteTrustDomainRequest
	9,  // 15: com.spirl.api.v1.trustdomain.API.TrustDomainInfo:input_type -> com.spirl.api.v1.trustdomain.TrustDomainInfoRequest
	13, // 16: com.spirl.api.v1.trustdomain.API.ListTrustDomainDeployments:input_type -> com.spirl.api.v1.trustdomain.ListTrustDomainDeploymentsRequest
	16, // 17: com.spirl.api.v1.trustdomain.API.DeleteTrustDomainDeployment:input_type -> com.spirl.api.v1.trustdomain.DeleteTrustDomainDeploymentRequest
	18, // 18: com.spirl.api.v1.trustdomain.API.ListTrustDomainKeys:input_type -> com.spirl.api.v1.trustdomain.ListTrustDomainKeysRequest
	20, // 19: com.spirl.api.v1.trustdomain.API.CreateTrustDomainKey:input_type -> com.spirl.api.v1.trustdomain.CreateTrustDomainKeyRequest
	22, // 20: com.spirl.api.v1.trustdomain.API.DeleteTrustDomainKey:input_type -> com.spirl.api.v1.trustdomain.DeleteTrustDomainKeyRequest
	24, // 21: com.spirl.api.v1.trustdomain.API.EnableTrustDomainKey:input_type -> com.spirl.api.v1.trustdomain.EnableTrustDomainKeyRequest
	26, // 22: com.spirl.api.v1.trustdomain.API.DisableTrustDomainKey:input_type -> com.spirl.api.v1.trustdomain.DisableTrustDomainKeyRequest
	2,  // 23: com.spirl.api.v1.trustdomain.API.CreateTrustDomain:output_type -> com.spirl.api.v1.trustdomain.CreateTrustDomainResponse
	4,  // 24: com.spirl.api.v1.trustdomain.API.RegisterTrustDomain:output_type -> com.spirl.api.v1.trustdomain.RegisterTrustDomainResponse
	6,  // 25: com.spirl.api.v1.trustdomain.API.ListTrustDomains:output_type -> com.spirl.api.v1.trustdomain.ListTrustDomainsResponse
	8,  // 26: com.spirl.api.v1.trustdomain.API.DeleteTrustDomain:output_type -> com.spirl.api.v1.trustdomain.DeleteTrustDomainResponse
	10, // 27: com.spirl.api.v1.trustdomain.API.TrustDomainInfo:output_type -> com.spirl.api.v1.trustdomain.TrustDomainInfoResponse
	15, // 28: com.spirl.api.v1.trustdomain.API.ListTrustDomainDeployments:output_type -> com.spirl.api.v1.trustdomain.ListTrustDomainDeploymentsResponse
	17, // 29: com.spirl.api.v1.trustdomain.API.DeleteTrustDomainDeployment:output_type -> com.spirl.api.v1.trustdomain.DeleteTrustDomainDeploymentResponse
	19, // 30: com.spirl.api.v1.trustdomain.API.ListTrustDomainKeys:output_type -> com.spirl.api.v1.trustdomain.ListTrustDomainKeysResponse
	21, // 31: com.spirl.api.v1.trustdomain.API.CreateTrustDomainKey:output_type -> com.spirl.api.v1.trustdomain.CreateTrustDomainKeyResponse
	23, // 32: com.spirl.api.v1.trustdomain.API.DeleteTrustDomainKey:output_type -> com.spirl.api.v1.trustdomain.DeleteTrustDomainKeyResponse
	25, // 33: com.spirl.api.v1.trustdomain.API.EnableTrustDomainKey:output_type -> com.spirl.api.v1.trustdomain.EnableTrustDomainKeyResponse
	27, // 34: com.spirl.api.v1.trustdomain.API.DisableTrustDomainKey:output_type -> com.spirl.api.v1.trustdomain.DisableTrustDomainKeyResponse
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_v1_trustdomainapi_api_proto_init() }
func file_api_v1_trustdomainapi_api_proto_init() {
	if File_api_v1_trustdomainapi_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_trustdomainapi_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTrustDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTrustDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterTrustDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterTrustDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListTrustDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListTrustDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTrustDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTrustDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TrustDomainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TrustDomainInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TrustDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TrustDomainKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListTrustDomainDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TrustDomainDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListTrustDomainDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTrustDomainDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTrustDomainDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListTrustDomainKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListTrustDomainKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTrustDomainKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTrustDomainKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTrustDomainKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTrustDomainKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*EnableTrustDomainKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*EnableTrustDomainKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*DisableTrustDomainKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DisableTrustDomainKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_trustdomainapi_api_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*PKIXPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_trustdomainapi_api_proto_msgTypes[11].OneofWrappers = []any{
		(*TrustDomainKey_PkixPubkey)(nil),
	}
	file_api_v1_trustdomainapi_api_proto_msgTypes[19].OneofWrappers = []any{
		(*CreateTrustDomainKeyRequest_PkixPubkey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_trustdomainapi_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_trustdomainapi_api_proto_goTypes,
		DependencyIndexes: file_api_v1_trustdomainapi_api_proto_depIdxs,
		EnumInfos:         file_api_v1_trustdomainapi_api_proto_enumTypes,
		MessageInfos:      file_api_v1_trustdomainapi_api_proto_msgTypes,
	}.Build()
	File_api_v1_trustdomainapi_api_proto = out.File
	file_api_v1_trustdomainapi_api_proto_rawDesc = nil
	file_api_v1_trustdomainapi_api_proto_goTypes = nil
	file_api_v1_trustdomainapi_api_proto_depIdxs = nil
}
