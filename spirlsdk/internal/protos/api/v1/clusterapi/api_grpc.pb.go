// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/clusterapi/api.proto

package clusterapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_CreateCluster_FullMethodName            = "/com.spirl.api.v1.cluster.API/CreateCluster"
	API_ListClusters_FullMethodName             = "/com.spirl.api.v1.cluster.API/ListClusters"
	API_DeleteCluster_FullMethodName            = "/com.spirl.api.v1.cluster.API/DeleteCluster"
	API_NewClusterVersion_FullMethodName        = "/com.spirl.api.v1.cluster.API/NewClusterVersion"
	API_ActivateClusterVersion_FullMethodName   = "/com.spirl.api.v1.cluster.API/ActivateClusterVersion"
	API_DeactivateClusterVersion_FullMethodName = "/com.spirl.api.v1.cluster.API/DeactivateClusterVersion"
	API_DeleteClusterVersion_FullMethodName     = "/com.spirl.api.v1.cluster.API/DeleteClusterVersion"
	API_ListClusterVersions_FullMethodName      = "/com.spirl.api.v1.cluster.API/ListClusterVersions"
	API_ListWorkloads_FullMethodName            = "/com.spirl.api.v1.cluster.API/ListWorkloads"
	API_ListNodes_FullMethodName                = "/com.spirl.api.v1.cluster.API/ListNodes"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Creates a new cluster with an initial version.
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error)
	// Lists clusters with optional filtering.
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// Deletes a cluster that was previously configured on the trust domain.
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error)
	// Creates a new cluster version with the provided public key. The platform of
	// the latest version will be used if platform is unset (rotate).
	NewClusterVersion(ctx context.Context, in *NewClusterVersionRequest, opts ...grpc.CallOption) (*NewClusterVersionResponse, error)
	// Activates a cluster version.
	ActivateClusterVersion(ctx context.Context, in *ActivateClusterVersionRequest, opts ...grpc.CallOption) (*ActivateClusterVersionResponse, error)
	// Deactivates a cluster version.
	DeactivateClusterVersion(ctx context.Context, in *DeactivateClusterVersionRequest, opts ...grpc.CallOption) (*DeactivateClusterVersionResponse, error)
	// Deletes cluster versions.
	DeleteClusterVersion(ctx context.Context, in *DeleteClusterVersionRequest, opts ...grpc.CallOption) (*DeleteClusterVersionResponse, error)
	// Lists cluster versions.
	ListClusterVersions(ctx context.Context, in *ListClusterVersionsRequest, opts ...grpc.CallOption) (*ListClusterVersionsResponse, error)
	// List the workloads of the cluster/cluster-version.
	//
	// Typically, workloads issued within 24 hours are considered active. We don't
	// have the workload usage data.
	ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error)
	// List the nodes in a node group
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClusterResponse)
	err := c.cc.Invoke(ctx, API_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, API_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClusterResponse)
	err := c.cc.Invoke(ctx, API_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewClusterVersion(ctx context.Context, in *NewClusterVersionRequest, opts ...grpc.CallOption) (*NewClusterVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewClusterVersionResponse)
	err := c.cc.Invoke(ctx, API_NewClusterVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ActivateClusterVersion(ctx context.Context, in *ActivateClusterVersionRequest, opts ...grpc.CallOption) (*ActivateClusterVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateClusterVersionResponse)
	err := c.cc.Invoke(ctx, API_ActivateClusterVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeactivateClusterVersion(ctx context.Context, in *DeactivateClusterVersionRequest, opts ...grpc.CallOption) (*DeactivateClusterVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateClusterVersionResponse)
	err := c.cc.Invoke(ctx, API_DeactivateClusterVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteClusterVersion(ctx context.Context, in *DeleteClusterVersionRequest, opts ...grpc.CallOption) (*DeleteClusterVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClusterVersionResponse)
	err := c.cc.Invoke(ctx, API_DeleteClusterVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListClusterVersions(ctx context.Context, in *ListClusterVersionsRequest, opts ...grpc.CallOption) (*ListClusterVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterVersionsResponse)
	err := c.cc.Invoke(ctx, API_ListClusterVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkloadsResponse)
	err := c.cc.Invoke(ctx, API_ListWorkloads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, API_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	// Creates a new cluster with an initial version.
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	// Lists clusters with optional filtering.
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// Deletes a cluster that was previously configured on the trust domain.
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	// Creates a new cluster version with the provided public key. The platform of
	// the latest version will be used if platform is unset (rotate).
	NewClusterVersion(context.Context, *NewClusterVersionRequest) (*NewClusterVersionResponse, error)
	// Activates a cluster version.
	ActivateClusterVersion(context.Context, *ActivateClusterVersionRequest) (*ActivateClusterVersionResponse, error)
	// Deactivates a cluster version.
	DeactivateClusterVersion(context.Context, *DeactivateClusterVersionRequest) (*DeactivateClusterVersionResponse, error)
	// Deletes cluster versions.
	DeleteClusterVersion(context.Context, *DeleteClusterVersionRequest) (*DeleteClusterVersionResponse, error)
	// Lists cluster versions.
	ListClusterVersions(context.Context, *ListClusterVersionsRequest) (*ListClusterVersionsResponse, error)
	// List the workloads of the cluster/cluster-version.
	//
	// Typically, workloads issued within 24 hours are considered active. We don't
	// have the workload usage data.
	ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error)
	// List the nodes in a node group
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedAPIServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedAPIServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedAPIServer) NewClusterVersion(context.Context, *NewClusterVersionRequest) (*NewClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewClusterVersion not implemented")
}
func (UnimplementedAPIServer) ActivateClusterVersion(context.Context, *ActivateClusterVersionRequest) (*ActivateClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateClusterVersion not implemented")
}
func (UnimplementedAPIServer) DeactivateClusterVersion(context.Context, *DeactivateClusterVersionRequest) (*DeactivateClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateClusterVersion not implemented")
}
func (UnimplementedAPIServer) DeleteClusterVersion(context.Context, *DeleteClusterVersionRequest) (*DeleteClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterVersion not implemented")
}
func (UnimplementedAPIServer) ListClusterVersions(context.Context, *ListClusterVersionsRequest) (*ListClusterVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterVersions not implemented")
}
func (UnimplementedAPIServer) ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloads not implemented")
}
func (UnimplementedAPIServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewClusterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_NewClusterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewClusterVersion(ctx, req.(*NewClusterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ActivateClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateClusterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ActivateClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ActivateClusterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ActivateClusterVersion(ctx, req.(*ActivateClusterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeactivateClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateClusterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeactivateClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeactivateClusterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeactivateClusterVersion(ctx, req.(*DeactivateClusterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteClusterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteClusterVersion(ctx, req.(*DeleteClusterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListClusterVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListClusterVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListClusterVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListClusterVersions(ctx, req.(*ListClusterVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListWorkloads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListWorkloads(ctx, req.(*ListWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.spirl.api.v1.cluster.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _API_CreateCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _API_ListClusters_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _API_DeleteCluster_Handler,
		},
		{
			MethodName: "NewClusterVersion",
			Handler:    _API_NewClusterVersion_Handler,
		},
		{
			MethodName: "ActivateClusterVersion",
			Handler:    _API_ActivateClusterVersion_Handler,
		},
		{
			MethodName: "DeactivateClusterVersion",
			Handler:    _API_DeactivateClusterVersion_Handler,
		},
		{
			MethodName: "DeleteClusterVersion",
			Handler:    _API_DeleteClusterVersion_Handler,
		},
		{
			MethodName: "ListClusterVersions",
			Handler:    _API_ListClusterVersions_Handler,
		},
		{
			MethodName: "ListWorkloads",
			Handler:    _API_ListWorkloads_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _API_ListNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/clusterapi/api.proto",
}
