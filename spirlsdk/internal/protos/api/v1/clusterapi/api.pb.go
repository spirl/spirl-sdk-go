// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/v1/clusterapi/api.proto

package clusterapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Identifies the platform
type Platform int32

const (
	Platform_PLATFORM_UNSPECIFIED Platform = 0
	Platform_PLATFORM_KUBERNETES  Platform = 1
	Platform_PLATFORM_ISTIO       Platform = 2
	Platform_PLATFORM_EKS         Platform = 3
	Platform_PLATFORM_EKS_ISTIO   Platform = 4
	Platform_PLATFORM_LINUX       Platform = 6
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "PLATFORM_UNSPECIFIED",
		1: "PLATFORM_KUBERNETES",
		2: "PLATFORM_ISTIO",
		3: "PLATFORM_EKS",
		4: "PLATFORM_EKS_ISTIO",
		6: "PLATFORM_LINUX",
	}
	Platform_value = map[string]int32{
		"PLATFORM_UNSPECIFIED": 0,
		"PLATFORM_KUBERNETES":  1,
		"PLATFORM_ISTIO":       2,
		"PLATFORM_EKS":         3,
		"PLATFORM_EKS_ISTIO":   4,
		"PLATFORM_LINUX":       6,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_clusterapi_api_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_api_v1_clusterapi_api_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{0}
}

type WorkloadType int32

const (
	WorkloadType_WORKLOADTYPE_UNKNOWN WorkloadType = 0
	WorkloadType_WORKLOADTYPE_X509    WorkloadType = 1
	WorkloadType_WORKLOADTYPE_JWT     WorkloadType = 2
)

// Enum value maps for WorkloadType.
var (
	WorkloadType_name = map[int32]string{
		0: "WORKLOADTYPE_UNKNOWN",
		1: "WORKLOADTYPE_X509",
		2: "WORKLOADTYPE_JWT",
	}
	WorkloadType_value = map[string]int32{
		"WORKLOADTYPE_UNKNOWN": 0,
		"WORKLOADTYPE_X509":    1,
		"WORKLOADTYPE_JWT":     2,
	}
)

func (x WorkloadType) Enum() *WorkloadType {
	p := new(WorkloadType)
	*p = x
	return p
}

func (x WorkloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_clusterapi_api_proto_enumTypes[1].Descriptor()
}

func (WorkloadType) Type() protoreflect.EnumType {
	return &file_api_v1_clusterapi_api_proto_enumTypes[1]
}

func (x WorkloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadType.Descriptor instead.
func (WorkloadType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{1}
}

type WorkloadState int32

const (
	WorkloadState_WORKLOADSTATE_UNKNOWN  WorkloadState = 0
	WorkloadState_WORKLOADSTATE_ACTIVE   WorkloadState = 1
	WorkloadState_WORKLOADSTATE_EXPIRING WorkloadState = 2
	WorkloadState_WORKLOADSTATE_EXPIRED  WorkloadState = 3
)

// Enum value maps for WorkloadState.
var (
	WorkloadState_name = map[int32]string{
		0: "WORKLOADSTATE_UNKNOWN",
		1: "WORKLOADSTATE_ACTIVE",
		2: "WORKLOADSTATE_EXPIRING",
		3: "WORKLOADSTATE_EXPIRED",
	}
	WorkloadState_value = map[string]int32{
		"WORKLOADSTATE_UNKNOWN":  0,
		"WORKLOADSTATE_ACTIVE":   1,
		"WORKLOADSTATE_EXPIRING": 2,
		"WORKLOADSTATE_EXPIRED":  3,
	}
)

func (x WorkloadState) Enum() *WorkloadState {
	p := new(WorkloadState)
	*p = x
	return p
}

func (x WorkloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_clusterapi_api_proto_enumTypes[2].Descriptor()
}

func (WorkloadState) Type() protoreflect.EnumType {
	return &file_api_v1_clusterapi_api_proto_enumTypes[2]
}

func (x WorkloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadState.Descriptor instead.
func (WorkloadState) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{2}
}

type ListClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The ID of the trust domain to filter the cluster list by.
	TrustDomainId string `protobuf:"bytes,2,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Optional. The name of the cluster to filter the cluster list by.
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{0}
}

func (x *ListClustersRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *ListClustersRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ListClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster to delete.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{3}
}

type CreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the trust domain to add the cluster version to.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Required. The ID of the trust domain to add the cluster version to.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Optional. A description of the cluster.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The platform running the cluster.
	Platform Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=com.spirl.api.v1.cluster.Platform" json:"platform,omitempty"`
	// Required. The public key of the cluster version. Only Ed25519 keys are
	// supported.
	//
	// Types that are assignable to Pubkey:
	//
	//	*CreateClusterRequest_PkixPubkey
	Pubkey isCreateClusterRequest_Pubkey `protobuf_oneof:"pubkey"`
	// Optional. The path template for the cluster.
	PathTemplate string `protobuf:"bytes,6,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// Optional. The cicd profile for the cluster.
	CicdProfileName string `protobuf:"bytes,7,opt,name=cicd_profile_name,json=cicdProfileName,proto3" json:"cicd_profile_name,omitempty"`
	// Optional. The x509 SVID customization template for the cluster.
	X509CustomizationTemplate string `protobuf:"bytes,8,opt,name=x509_customization_template,json=x509CustomizationTemplate,proto3" json:"x509_customization_template,omitempty"`
	// Optional. The provider attestation config.
	ProviderAttestationConfigId string `protobuf:"bytes,9,opt,name=provider_attestation_config_id,json=providerAttestationConfigId,proto3" json:"provider_attestation_config_id,omitempty"`
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *CreateClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (m *CreateClusterRequest) GetPubkey() isCreateClusterRequest_Pubkey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (x *CreateClusterRequest) GetPkixPubkey() *PKIXPublicKey {
	if x, ok := x.GetPubkey().(*CreateClusterRequest_PkixPubkey); ok {
		return x.PkixPubkey
	}
	return nil
}

func (x *CreateClusterRequest) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *CreateClusterRequest) GetCicdProfileName() string {
	if x != nil {
		return x.CicdProfileName
	}
	return ""
}

func (x *CreateClusterRequest) GetX509CustomizationTemplate() string {
	if x != nil {
		return x.X509CustomizationTemplate
	}
	return ""
}

func (x *CreateClusterRequest) GetProviderAttestationConfigId() string {
	if x != nil {
		return x.ProviderAttestationConfigId
	}
	return ""
}

type isCreateClusterRequest_Pubkey interface {
	isCreateClusterRequest_Pubkey()
}

type CreateClusterRequest_PkixPubkey struct {
	PkixPubkey *PKIXPublicKey `protobuf:"bytes,4,opt,name=pkix_pubkey,json=pkixPubkey,proto3,oneof"`
}

func (*CreateClusterRequest_PkixPubkey) isCreateClusterRequest_Pubkey() {}

type CreateClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the cluster version that was added.
	ClusterVersionId string `protobuf:"bytes,1,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
	// Types that are assignable to Deployment:
	//
	//	*CreateClusterResponse_KubernetesDeployment
	//	*CreateClusterResponse_VMDeployment
	Deployment isCreateClusterResponse_Deployment `protobuf_oneof:"deployment"`
}

func (x *CreateClusterResponse) Reset() {
	*x = CreateClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterResponse) ProtoMessage() {}

func (x *CreateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClusterResponse) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

func (m *CreateClusterResponse) GetDeployment() isCreateClusterResponse_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (x *CreateClusterResponse) GetKubernetesDeployment() *KubernetesDeployment {
	if x, ok := x.GetDeployment().(*CreateClusterResponse_KubernetesDeployment); ok {
		return x.KubernetesDeployment
	}
	return nil
}

func (x *CreateClusterResponse) GetVMDeployment() *VMDeployment {
	if x, ok := x.GetDeployment().(*CreateClusterResponse_VMDeployment); ok {
		return x.VMDeployment
	}
	return nil
}

type isCreateClusterResponse_Deployment interface {
	isCreateClusterResponse_Deployment()
}

type CreateClusterResponse_KubernetesDeployment struct {
	KubernetesDeployment *KubernetesDeployment `protobuf:"bytes,2,opt,name=kubernetesDeployment,proto3,oneof"`
}

type CreateClusterResponse_VMDeployment struct {
	VMDeployment *VMDeployment `protobuf:"bytes,3,opt,name=VMDeployment,proto3,oneof"` // In the future: AWSsAutoscaleGroupDeployment, PetServersDeployment, ...
}

func (*CreateClusterResponse_KubernetesDeployment) isCreateClusterResponse_Deployment() {}

func (*CreateClusterResponse_VMDeployment) isCreateClusterResponse_Deployment() {}

type NewClusterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the trust domain to add the cluster version to.
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Required. The ID of the cluster.
	ClusterId string `protobuf:"bytes,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The public key of the cluster version. Only Ed25519 keys are
	// supported.
	//
	// Types that are assignable to Pubkey:
	//
	//	*NewClusterVersionRequest_PkixPubkey
	Pubkey isNewClusterVersionRequest_Pubkey `protobuf_oneof:"pubkey"`
	// Optional. The path template for the cluster.
	PathTemplate string `protobuf:"bytes,6,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// Optional. The x509 SVID customization template for the cluster.
	// If not provided - the value of the previous cluster version is copied.
	// If empty string - template set to be an empty string (effectively disabling customization).
	X509CustomizationTemplate *string `protobuf:"bytes,7,opt,name=x509_customization_template,json=x509CustomizationTemplate,proto3,oneof" json:"x509_customization_template,omitempty"`
	// Optional. The provider attestation config.
	// If unset, use the value from the previous cluster version.
	// If "", clear the provider attestation config.
	// Otherwise, set/update the provider attestation config.
	ProviderAttestationConfigId *string `protobuf:"bytes,8,opt,name=provider_attestation_config_id,json=providerAttestationConfigId,proto3,oneof" json:"provider_attestation_config_id,omitempty"`
}

func (x *NewClusterVersionRequest) Reset() {
	*x = NewClusterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClusterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClusterVersionRequest) ProtoMessage() {}

func (x *NewClusterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClusterVersionRequest.ProtoReflect.Descriptor instead.
func (*NewClusterVersionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{6}
}

func (x *NewClusterVersionRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *NewClusterVersionRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (m *NewClusterVersionRequest) GetPubkey() isNewClusterVersionRequest_Pubkey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (x *NewClusterVersionRequest) GetPkixPubkey() *PKIXPublicKey {
	if x, ok := x.GetPubkey().(*NewClusterVersionRequest_PkixPubkey); ok {
		return x.PkixPubkey
	}
	return nil
}

func (x *NewClusterVersionRequest) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *NewClusterVersionRequest) GetX509CustomizationTemplate() string {
	if x != nil && x.X509CustomizationTemplate != nil {
		return *x.X509CustomizationTemplate
	}
	return ""
}

func (x *NewClusterVersionRequest) GetProviderAttestationConfigId() string {
	if x != nil && x.ProviderAttestationConfigId != nil {
		return *x.ProviderAttestationConfigId
	}
	return ""
}

type isNewClusterVersionRequest_Pubkey interface {
	isNewClusterVersionRequest_Pubkey()
}

type NewClusterVersionRequest_PkixPubkey struct {
	PkixPubkey *PKIXPublicKey `protobuf:"bytes,4,opt,name=pkix_pubkey,json=pkixPubkey,proto3,oneof"`
}

func (*NewClusterVersionRequest_PkixPubkey) isNewClusterVersionRequest_Pubkey() {}

type NewClusterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the cluster version that was added.
	ClusterVersionId string `protobuf:"bytes,1,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
	// Types that are assignable to Deployment:
	//
	//	*NewClusterVersionResponse_KubernetesDeployment
	//	*NewClusterVersionResponse_VMDeployment
	Deployment isNewClusterVersionResponse_Deployment `protobuf_oneof:"deployment"`
}

func (x *NewClusterVersionResponse) Reset() {
	*x = NewClusterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClusterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClusterVersionResponse) ProtoMessage() {}

func (x *NewClusterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClusterVersionResponse.ProtoReflect.Descriptor instead.
func (*NewClusterVersionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{7}
}

func (x *NewClusterVersionResponse) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

func (m *NewClusterVersionResponse) GetDeployment() isNewClusterVersionResponse_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (x *NewClusterVersionResponse) GetKubernetesDeployment() *KubernetesDeployment {
	if x, ok := x.GetDeployment().(*NewClusterVersionResponse_KubernetesDeployment); ok {
		return x.KubernetesDeployment
	}
	return nil
}

func (x *NewClusterVersionResponse) GetVMDeployment() *VMDeployment {
	if x, ok := x.GetDeployment().(*NewClusterVersionResponse_VMDeployment); ok {
		return x.VMDeployment
	}
	return nil
}

type isNewClusterVersionResponse_Deployment interface {
	isNewClusterVersionResponse_Deployment()
}

type NewClusterVersionResponse_KubernetesDeployment struct {
	KubernetesDeployment *KubernetesDeployment `protobuf:"bytes,2,opt,name=kubernetesDeployment,proto3,oneof"`
}

type NewClusterVersionResponse_VMDeployment struct {
	VMDeployment *VMDeployment `protobuf:"bytes,3,opt,name=VMDeployment,proto3,oneof"` // In the future: AWSsAutoscaleGroupDeployment, PetServersDeployment, ...
}

func (*NewClusterVersionResponse_KubernetesDeployment) isNewClusterVersionResponse_Deployment() {}

func (*NewClusterVersionResponse_VMDeployment) isNewClusterVersionResponse_Deployment() {}

type ActivateClusterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster version to activate.
	ClusterVersionId string `protobuf:"bytes,1,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
}

func (x *ActivateClusterVersionRequest) Reset() {
	*x = ActivateClusterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateClusterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateClusterVersionRequest) ProtoMessage() {}

func (x *ActivateClusterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateClusterVersionRequest.ProtoReflect.Descriptor instead.
func (*ActivateClusterVersionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{8}
}

func (x *ActivateClusterVersionRequest) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

type ActivateClusterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateClusterVersionResponse) Reset() {
	*x = ActivateClusterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateClusterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateClusterVersionResponse) ProtoMessage() {}

func (x *ActivateClusterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateClusterVersionResponse.ProtoReflect.Descriptor instead.
func (*ActivateClusterVersionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{9}
}

type DeactivateClusterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster version to deactivate.
	ClusterVersionId string `protobuf:"bytes,1,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
}

func (x *DeactivateClusterVersionRequest) Reset() {
	*x = DeactivateClusterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateClusterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateClusterVersionRequest) ProtoMessage() {}

func (x *DeactivateClusterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateClusterVersionRequest.ProtoReflect.Descriptor instead.
func (*DeactivateClusterVersionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{10}
}

func (x *DeactivateClusterVersionRequest) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

type DeactivateClusterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeactivateClusterVersionResponse) Reset() {
	*x = DeactivateClusterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateClusterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateClusterVersionResponse) ProtoMessage() {}

func (x *DeactivateClusterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateClusterVersionResponse.ProtoReflect.Descriptor instead.
func (*DeactivateClusterVersionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{11}
}

type DeleteClusterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster version to delete.
	ClusterVersionId string `protobuf:"bytes,1,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
	// Optional. If true, the version will be deleted even if it is still active.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteClusterVersionRequest) Reset() {
	*x = DeleteClusterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVersionRequest) ProtoMessage() {}

func (x *DeleteClusterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterVersionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteClusterVersionRequest) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

func (x *DeleteClusterVersionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteClusterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteClusterVersionResponse) Reset() {
	*x = DeleteClusterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterVersionResponse) ProtoMessage() {}

func (x *DeleteClusterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterVersionResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterVersionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{13}
}

type ListClusterVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster to list versions for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ListClusterVersionsRequest) Reset() {
	*x = ListClusterVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterVersionsRequest) ProtoMessage() {}

func (x *ListClusterVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterVersionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListClusterVersionsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClusterVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterVersions []*ClusterVersion `protobuf:"bytes,1,rep,name=cluster_versions,json=clusterVersions,proto3" json:"cluster_versions,omitempty"`
}

func (x *ListClusterVersionsResponse) Reset() {
	*x = ListClusterVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterVersionsResponse) ProtoMessage() {}

func (x *ListClusterVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterVersionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListClusterVersionsResponse) GetClusterVersions() []*ClusterVersion {
	if x != nil {
		return x.ClusterVersions
	}
	return nil
}

type ListWorkloadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster to list versions for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Optional. The version of the cluster version. If not set, will return the
	// aggregated status of all versions.
	ClusterVersionId string `protobuf:"bytes,2,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
	// Optional. The duration within which the returned workloads are issued.
	IssuedWithin *durationpb.Duration `protobuf:"bytes,3,opt,name=issued_within,json=issuedWithin,proto3" json:"issued_within,omitempty"`
}

func (x *ListWorkloadsRequest) Reset() {
	*x = ListWorkloadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkloadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkloadsRequest) ProtoMessage() {}

func (x *ListWorkloadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkloadsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkloadsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListWorkloadsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListWorkloadsRequest) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

func (x *ListWorkloadsRequest) GetIssuedWithin() *durationpb.Duration {
	if x != nil {
		return x.IssuedWithin
	}
	return nil
}

type ListWorkloadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of {spiffe-id, type, ...} tuples.
	Workloads []*WorkloadCount `protobuf:"bytes,1,rep,name=workloads,proto3" json:"workloads,omitempty"`
}

func (x *ListWorkloadsResponse) Reset() {
	*x = ListWorkloadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkloadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkloadsResponse) ProtoMessage() {}

func (x *ListWorkloadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkloadsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkloadsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListWorkloadsResponse) GetWorkloads() []*WorkloadCount {
	if x != nil {
		return x.Workloads
	}
	return nil
}

type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the cluster to list nodes for
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Optional. The version of the cluster version. If not set, will return
	// nodes for all versions.
	ClusterVersionId string `protobuf:"bytes,2,opt,name=cluster_version_id,json=clusterVersionId,proto3" json:"cluster_version_id,omitempty"`
	// Optional. The duration within which the returned nodes were last seen.
	LastSeenWithin *durationpb.Duration `protobuf:"bytes,3,opt,name=last_seen_within,json=lastSeenWithin,proto3" json:"last_seen_within,omitempty"`
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListNodesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListNodesRequest) GetClusterVersionId() string {
	if x != nil {
		return x.ClusterVersionId
	}
	return ""
}

func (x *ListNodesRequest) GetLastSeenWithin() *durationpb.Duration {
	if x != nil {
		return x.LastSeenWithin
	}
	return nil
}

type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of nodes.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{19}
}

func (x *ListNodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID this cluster is associated with
	OrgId string `protobuf:"bytes,6,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Trust Domain ID this cluster is associated with
	TrustDomainId string `protobuf:"bytes,7,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Trust Domain name this cluster is associated with
	TrustDomainName string `protobuf:"bytes,8,opt,name=trust_domain_name,json=trustDomainName,proto3" json:"trust_domain_name,omitempty"`
	// ID for the cluster
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// User supplied name of this cluster
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// User supplied description of this cluster
	Description string `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// Platform that this cluster is running
	Platform Platform `protobuf:"varint,4,opt,name=platform,proto3,enum=com.spirl.api.v1.cluster.Platform" json:"platform,omitempty"`
	// Template used to construct the path of the SVIDs for this cluster
	PathTemplate string `protobuf:"bytes,5,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// Number of versions associated with this cluster
	NumVersions int64 `protobuf:"varint,9,opt,name=num_versions,json=numVersions,proto3" json:"num_versions,omitempty"`
	// An estimate of the last time this version was used by an agent.
	EstimatedLastUsed *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=estimated_last_used,json=estimatedLastUsed,proto3" json:"estimated_last_used,omitempty"`
	NumActiveAgents   int64                  `protobuf:"varint,11,opt,name=num_active_agents,json=numActiveAgents,proto3" json:"num_active_agents,omitempty"`
	// Active workloads are the IDs issued recently (within 24 hours). We don't
	// know if the workload IDs are used.
	EstimatedNumActiveWorkloads int64 `protobuf:"varint,12,opt,name=estimated_num_active_workloads,json=estimatedNumActiveWorkloads,proto3" json:"estimated_num_active_workloads,omitempty"`
	// The time when this cluster was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// CI/CD Profile ID this cluster is associated with
	CiCdProfileId string `protobuf:"bytes,15,opt,name=ci_cd_profile_id,json=ciCdProfileId,proto3" json:"ci_cd_profile_id,omitempty"`
	// CI/CD Profile Name this cluster is associated with
	CiCdProfileName string `protobuf:"bytes,16,opt,name=ci_cd_profile_name,json=ciCdProfileName,proto3" json:"ci_cd_profile_name,omitempty"`
	// Optional template to customize minted x509 SVIDs.
	X509CustomizationTemplate string `protobuf:"bytes,17,opt,name=x509_customization_template,json=x509CustomizationTemplate,proto3" json:"x509_customization_template,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{20}
}

func (x *Cluster) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Cluster) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *Cluster) GetTrustDomainName() string {
	if x != nil {
		return x.TrustDomainName
	}
	return ""
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (x *Cluster) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *Cluster) GetNumVersions() int64 {
	if x != nil {
		return x.NumVersions
	}
	return 0
}

func (x *Cluster) GetEstimatedLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedLastUsed
	}
	return nil
}

func (x *Cluster) GetNumActiveAgents() int64 {
	if x != nil {
		return x.NumActiveAgents
	}
	return 0
}

func (x *Cluster) GetEstimatedNumActiveWorkloads() int64 {
	if x != nil {
		return x.EstimatedNumActiveWorkloads
	}
	return 0
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetCiCdProfileId() string {
	if x != nil {
		return x.CiCdProfileId
	}
	return ""
}

func (x *Cluster) GetCiCdProfileName() string {
	if x != nil {
		return x.CiCdProfileName
	}
	return ""
}

func (x *Cluster) GetX509CustomizationTemplate() string {
	if x != nil {
		return x.X509CustomizationTemplate
	}
	return ""
}

type ClusterVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster version.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the cluster this version belongs to.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The platform running the cluster.
	Platform Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=com.spirl.api.v1.cluster.Platform" json:"platform,omitempty"`
	// The public key.
	//
	// Types that are assignable to Pubkey:
	//
	//	*ClusterVersion_PkixPubkey
	Pubkey isClusterVersion_Pubkey `protobuf_oneof:"pubkey"`
	// Template for constructing the path component of the SPIFFE ID
	PathTemplate string `protobuf:"bytes,5,opt,name=path_template,json=pathTemplate,proto3" json:"path_template,omitempty"`
	// Whether or not the cluster version is active.
	Active bool `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// An estimate of the last time this version was used by an agent.
	EstimatedLastUsed *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=estimated_last_used,json=estimatedLastUsed,proto3" json:"estimated_last_used,omitempty"`
	// The time when this cluster version was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Number of active agents.
	NumActiveAgents int64 `protobuf:"varint,9,opt,name=num_active_agents,json=numActiveAgents,proto3" json:"num_active_agents,omitempty"`
	// Active workloads are the IDs issued recently (within 24 hours). We don't
	// know if the workload IDs are used.
	EstimatedNumActiveWorkloads int64 `protobuf:"varint,10,opt,name=estimated_num_active_workloads,json=estimatedNumActiveWorkloads,proto3" json:"estimated_num_active_workloads,omitempty"`
	// Optional template for x509 SVIDs customization
	X509CustomizationTemplate string `protobuf:"bytes,11,opt,name=x509_customization_template,json=x509CustomizationTemplate,proto3" json:"x509_customization_template,omitempty"`
	// Optional. The provider attestation config.
	ProviderAttestationConfigName string `protobuf:"bytes,12,opt,name=provider_attestation_config_name,json=providerAttestationConfigName,proto3" json:"provider_attestation_config_name,omitempty"`
}

func (x *ClusterVersion) Reset() {
	*x = ClusterVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVersion) ProtoMessage() {}

func (x *ClusterVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVersion.ProtoReflect.Descriptor instead.
func (*ClusterVersion) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{21}
}

func (x *ClusterVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterVersion) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterVersion) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (m *ClusterVersion) GetPubkey() isClusterVersion_Pubkey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (x *ClusterVersion) GetPkixPubkey() *PKIXPublicKey {
	if x, ok := x.GetPubkey().(*ClusterVersion_PkixPubkey); ok {
		return x.PkixPubkey
	}
	return nil
}

func (x *ClusterVersion) GetPathTemplate() string {
	if x != nil {
		return x.PathTemplate
	}
	return ""
}

func (x *ClusterVersion) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ClusterVersion) GetEstimatedLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedLastUsed
	}
	return nil
}

func (x *ClusterVersion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ClusterVersion) GetNumActiveAgents() int64 {
	if x != nil {
		return x.NumActiveAgents
	}
	return 0
}

func (x *ClusterVersion) GetEstimatedNumActiveWorkloads() int64 {
	if x != nil {
		return x.EstimatedNumActiveWorkloads
	}
	return 0
}

func (x *ClusterVersion) GetX509CustomizationTemplate() string {
	if x != nil {
		return x.X509CustomizationTemplate
	}
	return ""
}

func (x *ClusterVersion) GetProviderAttestationConfigName() string {
	if x != nil {
		return x.ProviderAttestationConfigName
	}
	return ""
}

type isClusterVersion_Pubkey interface {
	isClusterVersion_Pubkey()
}

type ClusterVersion_PkixPubkey struct {
	PkixPubkey *PKIXPublicKey `protobuf:"bytes,4,opt,name=pkix_pubkey,json=pkixPubkey,proto3,oneof"`
}

func (*ClusterVersion_PkixPubkey) isClusterVersion_Pubkey() {}

// Represents a public key in PKIX, ASN.1 DER form.
type PKIXPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PKIXPublicKey) Reset() {
	*x = PKIXPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKIXPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKIXPublicKey) ProtoMessage() {}

func (x *PKIXPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKIXPublicKey.ProtoReflect.Descriptor instead.
func (*PKIXPublicKey) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{22}
}

func (x *PKIXPublicKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Encapsulates the data that is needed to configure the customer's K8s cluster
// to run the SPIRL agent on every node via daemon sets
type KubernetesDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This YAML contains the following important dynamic configuration:
	// - trust domain endpoint
	KubectlYaml string `protobuf:"bytes,1,opt,name=kubectl_yaml,json=kubectlYaml,proto3" json:"kubectl_yaml,omitempty"`
}

func (x *KubernetesDeployment) Reset() {
	*x = KubernetesDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesDeployment) ProtoMessage() {}

func (x *KubernetesDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesDeployment.ProtoReflect.Descriptor instead.
func (*KubernetesDeployment) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{23}
}

func (x *KubernetesDeployment) GetKubectlYaml() string {
	if x != nil {
		return x.KubectlYaml
	}
	return ""
}

// Encapsulates the data that is needed to run the spirl-agent using docker compose
type VMDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentConfigurationFile string `protobuf:"bytes,1,opt,name=agent_configuration_file,json=agentConfigurationFile,proto3" json:"agent_configuration_file,omitempty"`
	// optional. Run the agent as a docker container
	DockerComposeYaml string `protobuf:"bytes,2,opt,name=docker_compose_yaml,json=dockerComposeYaml,proto3" json:"docker_compose_yaml,omitempty"`
}

func (x *VMDeployment) Reset() {
	*x = VMDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMDeployment) ProtoMessage() {}

func (x *VMDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMDeployment.ProtoReflect.Descriptor instead.
func (*VMDeployment) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{24}
}

func (x *VMDeployment) GetAgentConfigurationFile() string {
	if x != nil {
		return x.AgentConfigurationFile
	}
	return ""
}

func (x *VMDeployment) GetDockerComposeYaml() string {
	if x != nil {
		return x.DockerComposeYaml
	}
	return ""
}

type WorkloadCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       WorkloadType           `protobuf:"varint,2,opt,name=type,proto3,enum=com.spirl.api.v1.cluster.WorkloadType" json:"type,omitempty"`
	State      WorkloadState          `protobuf:"varint,6,opt,name=state,proto3,enum=com.spirl.api.v1.cluster.WorkloadState" json:"state,omitempty"`
	Count      int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	LastIssued *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_issued,json=lastIssued,proto3" json:"last_issued,omitempty"`
	ExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *WorkloadCount) Reset() {
	*x = WorkloadCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadCount) ProtoMessage() {}

func (x *WorkloadCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadCount.ProtoReflect.Descriptor instead.
func (*WorkloadCount) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{25}
}

func (x *WorkloadCount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkloadCount) GetType() WorkloadType {
	if x != nil {
		return x.Type
	}
	return WorkloadType_WORKLOADTYPE_UNKNOWN
}

func (x *WorkloadCount) GetState() WorkloadState {
	if x != nil {
		return x.State
	}
	return WorkloadState_WORKLOADSTATE_UNKNOWN
}

func (x *WorkloadCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WorkloadCount) GetLastIssued() *timestamppb.Timestamp {
	if x != nil {
		return x.LastIssued
	}
	return nil
}

func (x *WorkloadCount) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId       string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Hostname      string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	MachineIdHash string                 `protobuf:"bytes,3,opt,name=machine_id_hash,json=machineIdHash,proto3" json:"machine_id_hash,omitempty"`
	IpAddress     string                 `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	LastSeen      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clusterapi_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clusterapi_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_v1_clusterapi_api_proto_rawDescGZIP(), []int{26}
}

func (x *Node) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Node) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Node) GetMachineIdHash() string {
	if x != nil {
		return x.MachineIdHash
	}
	return ""
}

func (x *Node) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Node) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

var File_api_v1_clusterapi_api_proto protoreflect.FileDescriptor

var file_api_v1_clusterapi_api_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x22, 0x55, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x41, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6b, 0x69,
	0x78, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x4b, 0x49, 0x58, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6b, 0x69, 0x78, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x69,
	0x63, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x69, 0x63, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x78, 0x35, 0x30,
	0x39, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x87, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x64, 0x0a,
	0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x56, 0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x56, 0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xba, 0x03, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6b, 0x69, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x4b, 0x49, 0x58, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6b, 0x69, 0x78, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x1b, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x19, 0x78, 0x35, 0x30,
	0x39, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x21, 0x0a,
	0x1f, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x8b, 0x02, 0x0a,
	0x19, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x0c, 0x56, 0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x56, 0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x56, 0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x61, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x72, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x22, 0x5e, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x22, 0x49, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xd6, 0x05, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x69, 0x5f,
	0x63, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x69, 0x43, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x69, 0x5f, 0x63, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x69, 0x43, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x1b, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x78, 0x35, 0x30, 0x39, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x93, 0x05, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6b, 0x69, 0x78, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x4b, 0x49, 0x58, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6b, 0x69, 0x78, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x4a, 0x0a, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x78, 0x35, 0x30, 0x39,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x78,
	0x35, 0x30, 0x39, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x23, 0x0a, 0x0d, 0x50,
	0x4b, 0x49, 0x58, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x39, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x74, 0x6c, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x74, 0x6c, 0x59, 0x61, 0x6d, 0x6c, 0x22, 0x78, 0x0a, 0x0c, 0x56,
	0x4d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x59, 0x61, 0x6d, 0x6c, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x22, 0xbd, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x2a, 0x95, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x53, 0x54,
	0x49, 0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x45, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x45, 0x4b, 0x53, 0x5f, 0x49, 0x53, 0x54, 0x49, 0x4f, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58,
	0x10, 0x06, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x2a, 0x55, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b,
	0x4c, 0x4f, 0x41, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x4f, 0x52,
	0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x02, 0x2a,
	0x7b, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57,
	0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0xeb, 0x09, 0x0a,
	0x03, 0x41, 0x50, 0x49, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x4e, 0x65, 0x77,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x6c, 0x2f, 0x73,
	0x70, 0x69, 0x72, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_clusterapi_api_proto_rawDescOnce sync.Once
	file_api_v1_clusterapi_api_proto_rawDescData = file_api_v1_clusterapi_api_proto_rawDesc
)

func file_api_v1_clusterapi_api_proto_rawDescGZIP() []byte {
	file_api_v1_clusterapi_api_proto_rawDescOnce.Do(func() {
		file_api_v1_clusterapi_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_clusterapi_api_proto_rawDescData)
	})
	return file_api_v1_clusterapi_api_proto_rawDescData
}

var file_api_v1_clusterapi_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_v1_clusterapi_api_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_api_v1_clusterapi_api_proto_goTypes = []any{
	(Platform)(0),                            // 0: com.spirl.api.v1.cluster.Platform
	(WorkloadType)(0),                        // 1: com.spirl.api.v1.cluster.WorkloadType
	(WorkloadState)(0),                       // 2: com.spirl.api.v1.cluster.WorkloadState
	(*ListClustersRequest)(nil),              // 3: com.spirl.api.v1.cluster.ListClustersRequest
	(*ListClustersResponse)(nil),             // 4: com.spirl.api.v1.cluster.ListClustersResponse
	(*DeleteClusterRequest)(nil),             // 5: com.spirl.api.v1.cluster.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),            // 6: com.spirl.api.v1.cluster.DeleteClusterResponse
	(*CreateClusterRequest)(nil),             // 7: com.spirl.api.v1.cluster.CreateClusterRequest
	(*CreateClusterResponse)(nil),            // 8: com.spirl.api.v1.cluster.CreateClusterResponse
	(*NewClusterVersionRequest)(nil),         // 9: com.spirl.api.v1.cluster.NewClusterVersionRequest
	(*NewClusterVersionResponse)(nil),        // 10: com.spirl.api.v1.cluster.NewClusterVersionResponse
	(*ActivateClusterVersionRequest)(nil),    // 11: com.spirl.api.v1.cluster.ActivateClusterVersionRequest
	(*ActivateClusterVersionResponse)(nil),   // 12: com.spirl.api.v1.cluster.ActivateClusterVersionResponse
	(*DeactivateClusterVersionRequest)(nil),  // 13: com.spirl.api.v1.cluster.DeactivateClusterVersionRequest
	(*DeactivateClusterVersionResponse)(nil), // 14: com.spirl.api.v1.cluster.DeactivateClusterVersionResponse
	(*DeleteClusterVersionRequest)(nil),      // 15: com.spirl.api.v1.cluster.DeleteClusterVersionRequest
	(*DeleteClusterVersionResponse)(nil),     // 16: com.spirl.api.v1.cluster.DeleteClusterVersionResponse
	(*ListClusterVersionsRequest)(nil),       // 17: com.spirl.api.v1.cluster.ListClusterVersionsRequest
	(*ListClusterVersionsResponse)(nil),      // 18: com.spirl.api.v1.cluster.ListClusterVersionsResponse
	(*ListWorkloadsRequest)(nil),             // 19: com.spirl.api.v1.cluster.ListWorkloadsRequest
	(*ListWorkloadsResponse)(nil),            // 20: com.spirl.api.v1.cluster.ListWorkloadsResponse
	(*ListNodesRequest)(nil),                 // 21: com.spirl.api.v1.cluster.ListNodesRequest
	(*ListNodesResponse)(nil),                // 22: com.spirl.api.v1.cluster.ListNodesResponse
	(*Cluster)(nil),                          // 23: com.spirl.api.v1.cluster.Cluster
	(*ClusterVersion)(nil),                   // 24: com.spirl.api.v1.cluster.ClusterVersion
	(*PKIXPublicKey)(nil),                    // 25: com.spirl.api.v1.cluster.PKIXPublicKey
	(*KubernetesDeployment)(nil),             // 26: com.spirl.api.v1.cluster.KubernetesDeployment
	(*VMDeployment)(nil),                     // 27: com.spirl.api.v1.cluster.VMDeployment
	(*WorkloadCount)(nil),                    // 28: com.spirl.api.v1.cluster.WorkloadCount
	(*Node)(nil),                             // 29: com.spirl.api.v1.cluster.Node
	(*durationpb.Duration)(nil),              // 30: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),            // 31: google.protobuf.Timestamp
}
var file_api_v1_clusterapi_api_proto_depIdxs = []int32{
	23, // 0: com.spirl.api.v1.cluster.ListClustersResponse.clusters:type_name -> com.spirl.api.v1.cluster.Cluster
	0,  // 1: com.spirl.api.v1.cluster.CreateClusterRequest.platform:type_name -> com.spirl.api.v1.cluster.Platform
	25, // 2: com.spirl.api.v1.cluster.CreateClusterRequest.pkix_pubkey:type_name -> com.spirl.api.v1.cluster.PKIXPublicKey
	26, // 3: com.spirl.api.v1.cluster.CreateClusterResponse.kubernetesDeployment:type_name -> com.spirl.api.v1.cluster.KubernetesDeployment
	27, // 4: com.spirl.api.v1.cluster.CreateClusterResponse.VMDeployment:type_name -> com.spirl.api.v1.cluster.VMDeployment
	25, // 5: com.spirl.api.v1.cluster.NewClusterVersionRequest.pkix_pubkey:type_name -> com.spirl.api.v1.cluster.PKIXPublicKey
	26, // 6: com.spirl.api.v1.cluster.NewClusterVersionResponse.kubernetesDeployment:type_name -> com.spirl.api.v1.cluster.KubernetesDeployment
	27, // 7: com.spirl.api.v1.cluster.NewClusterVersionResponse.VMDeployment:type_name -> com.spirl.api.v1.cluster.VMDeployment
	24, // 8: com.spirl.api.v1.cluster.ListClusterVersionsResponse.cluster_versions:type_name -> com.spirl.api.v1.cluster.ClusterVersion
	30, // 9: com.spirl.api.v1.cluster.ListWorkloadsRequest.issued_within:type_name -> google.protobuf.Duration
	28, // 10: com.spirl.api.v1.cluster.ListWorkloadsResponse.workloads:type_name -> com.spirl.api.v1.cluster.WorkloadCount
	30, // 11: com.spirl.api.v1.cluster.ListNodesRequest.last_seen_within:type_name -> google.protobuf.Duration
	29, // 12: com.spirl.api.v1.cluster.ListNodesResponse.nodes:type_name -> com.spirl.api.v1.cluster.Node
	0,  // 13: com.spirl.api.v1.cluster.Cluster.platform:type_name -> com.spirl.api.v1.cluster.Platform
	31, // 14: com.spirl.api.v1.cluster.Cluster.estimated_last_used:type_name -> google.protobuf.Timestamp
	31, // 15: com.spirl.api.v1.cluster.Cluster.created_at:type_name -> google.protobuf.Timestamp
	0,  // 16: com.spirl.api.v1.cluster.ClusterVersion.platform:type_name -> com.spirl.api.v1.cluster.Platform
	25, // 17: com.spirl.api.v1.cluster.ClusterVersion.pkix_pubkey:type_name -> com.spirl.api.v1.cluster.PKIXPublicKey
	31, // 18: com.spirl.api.v1.cluster.ClusterVersion.estimated_last_used:type_name -> google.protobuf.Timestamp
	31, // 19: com.spirl.api.v1.cluster.ClusterVersion.created_at:type_name -> google.protobuf.Timestamp
	1,  // 20: com.spirl.api.v1.cluster.WorkloadCount.type:type_name -> com.spirl.api.v1.cluster.WorkloadType
	2,  // 21: com.spirl.api.v1.cluster.WorkloadCount.state:type_name -> com.spirl.api.v1.cluster.WorkloadState
	31, // 22: com.spirl.api.v1.cluster.WorkloadCount.last_issued:type_name -> google.protobuf.Timestamp
	31, // 23: com.spirl.api.v1.cluster.WorkloadCount.expires_at:type_name -> google.protobuf.Timestamp
	31, // 24: com.spirl.api.v1.cluster.Node.last_seen:type_name -> google.protobuf.Timestamp
	7,  // 25: com.spirl.api.v1.cluster.API.CreateCluster:input_type -> com.spirl.api.v1.cluster.CreateClusterRequest
	3,  // 26: com.spirl.api.v1.cluster.API.ListClusters:input_type -> com.spirl.api.v1.cluster.ListClustersRequest
	5,  // 27: com.spirl.api.v1.cluster.API.DeleteCluster:input_type -> com.spirl.api.v1.cluster.DeleteClusterRequest
	9,  // 28: com.spirl.api.v1.cluster.API.NewClusterVersion:input_type -> com.spirl.api.v1.cluster.NewClusterVersionRequest
	11, // 29: com.spirl.api.v1.cluster.API.ActivateClusterVersion:input_type -> com.spirl.api.v1.cluster.ActivateClusterVersionRequest
	13, // 30: com.spirl.api.v1.cluster.API.DeactivateClusterVersion:input_type -> com.spirl.api.v1.cluster.DeactivateClusterVersionRequest
	15, // 31: com.spirl.api.v1.cluster.API.DeleteClusterVersion:input_type -> com.spirl.api.v1.cluster.DeleteClusterVersionRequest
	17, // 32: com.spirl.api.v1.cluster.API.ListClusterVersions:input_type -> com.spirl.api.v1.cluster.ListClusterVersionsRequest
	19, // 33: com.spirl.api.v1.cluster.API.ListWorkloads:input_type -> com.spirl.api.v1.cluster.ListWorkloadsRequest
	21, // 34: com.spirl.api.v1.cluster.API.ListNodes:input_type -> com.spirl.api.v1.cluster.ListNodesRequest
	8,  // 35: com.spirl.api.v1.cluster.API.CreateCluster:output_type -> com.spirl.api.v1.cluster.CreateClusterResponse
	4,  // 36: com.spirl.api.v1.cluster.API.ListClusters:output_type -> com.spirl.api.v1.cluster.ListClustersResponse
	6,  // 37: com.spirl.api.v1.cluster.API.DeleteCluster:output_type -> com.spirl.api.v1.cluster.DeleteClusterResponse
	10, // 38: com.spirl.api.v1.cluster.API.NewClusterVersion:output_type -> com.spirl.api.v1.cluster.NewClusterVersionResponse
	12, // 39: com.spirl.api.v1.cluster.API.ActivateClusterVersion:output_type -> com.spirl.api.v1.cluster.ActivateClusterVersionResponse
	14, // 40: com.spirl.api.v1.cluster.API.DeactivateClusterVersion:output_type -> com.spirl.api.v1.cluster.DeactivateClusterVersionResponse
	16, // 41: com.spirl.api.v1.cluster.API.DeleteClusterVersion:output_type -> com.spirl.api.v1.cluster.DeleteClusterVersionResponse
	18, // 42: com.spirl.api.v1.cluster.API.ListClusterVersions:output_type -> com.spirl.api.v1.cluster.ListClusterVersionsResponse
	20, // 43: com.spirl.api.v1.cluster.API.ListWorkloads:output_type -> com.spirl.api.v1.cluster.ListWorkloadsResponse
	22, // 44: com.spirl.api.v1.cluster.API.ListNodes:output_type -> com.spirl.api.v1.cluster.ListNodesResponse
	35, // [35:45] is the sub-list for method output_type
	25, // [25:35] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_api_v1_clusterapi_api_proto_init() }
func file_api_v1_clusterapi_api_proto_init() {
	if File_api_v1_clusterapi_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_clusterapi_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NewClusterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*NewClusterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ActivateClusterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ActivateClusterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeactivateClusterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeactivateClusterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteClusterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteClusterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListClusterVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListClusterVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListWorkloadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListWorkloadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PKIXPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*VMDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*WorkloadCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clusterapi_api_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_clusterapi_api_proto_msgTypes[4].OneofWrappers = []any{
		(*CreateClusterRequest_PkixPubkey)(nil),
	}
	file_api_v1_clusterapi_api_proto_msgTypes[5].OneofWrappers = []any{
		(*CreateClusterResponse_KubernetesDeployment)(nil),
		(*CreateClusterResponse_VMDeployment)(nil),
	}
	file_api_v1_clusterapi_api_proto_msgTypes[6].OneofWrappers = []any{
		(*NewClusterVersionRequest_PkixPubkey)(nil),
	}
	file_api_v1_clusterapi_api_proto_msgTypes[7].OneofWrappers = []any{
		(*NewClusterVersionResponse_KubernetesDeployment)(nil),
		(*NewClusterVersionResponse_VMDeployment)(nil),
	}
	file_api_v1_clusterapi_api_proto_msgTypes[21].OneofWrappers = []any{
		(*ClusterVersion_PkixPubkey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_clusterapi_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_clusterapi_api_proto_goTypes,
		DependencyIndexes: file_api_v1_clusterapi_api_proto_depIdxs,
		EnumInfos:         file_api_v1_clusterapi_api_proto_enumTypes,
		MessageInfos:      file_api_v1_clusterapi_api_proto_msgTypes,
	}.Build()
	File_api_v1_clusterapi_api_proto = out.File
	file_api_v1_clusterapi_api_proto_rawDesc = nil
	file_api_v1_clusterapi_api_proto_goTypes = nil
	file_api_v1_clusterapi_api_proto_depIdxs = nil
}
